<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在github上搭建一个hexo博客</title>
    <url>/2021/01/01/create-Bolg-site/</url>
    <content><![CDATA[<h1 id="一、为何搭建个人博客"><a href="#一、为何搭建个人博客" class="headerlink" title="一、为何搭建个人博客:"></a>一、为何搭建个人博客:</h1><p>&emsp;&emsp;其实我在CSDN有自己的博客, 随着文章越写越多, 我发现CSDN对分类的数量是有限制的, 后期我想写其他分类的文章的时候, 就不能再创建新的分类了. 也有想过再搞一个微信的公众号, 之前上学那会搞过学院的官方微信公众号, 各种认证和各种敏感词汇搞得很烦, 而且对于一些定制化的接入也比较麻烦. 所以, 想来想去, 还是搞一个内容可以完全由自己掌握的博客. 一来可以当做自己的一个学习笔记, 二来可以分享给需要的朋友, 三来可以作为自己其他服务的入口. 说干就干吧;</p>
<h1 id="二、创建githu仓库"><a href="#二、创建githu仓库" class="headerlink" title="二、创建githu仓库:"></a>二、创建githu仓库:</h1><p>&emsp;&emsp;关于Git仓库有国内的<a href="https://gitee.com/">Gitee</a>和国外的<a href="https://github.com/">Github</a>都可以选择;<br>&emsp;&emsp;默认已经在电脑上安装了<a href="https://git-scm.com/">Git</a>的客户端;</p>
<h2 id="1-创建代码仓库"><a href="#1-创建代码仓库" class="headerlink" title="1. 创建代码仓库:"></a>1. 创建代码仓库:</h2><p><img src="/images/create-Bolg-site/createRepository.png"></p>
<h1 id="三、Hexo"><a href="#三、Hexo" class="headerlink" title="三、Hexo:"></a>三、Hexo:</h1><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h1 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章:"></a>四、编写文章:</h1><h1 id="五、Hexo常用"><a href="#五、Hexo常用" class="headerlink" title="五、Hexo常用:"></a>五、Hexo常用:</h1>]]></content>
      <categories>
        <category>服务器</category>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习001之绪论</title>
    <url>/2021/01/10/java_001_Init/</url>
    <content><![CDATA[<h1 id="一、开发前言"><a href="#一、开发前言" class="headerlink" title="一、开发前言:"></a>一、开发前言:</h1><h2 id="1-java语言概述"><a href="#1-java语言概述" class="headerlink" title="1. java语言概述:"></a>1. java语言概述:</h2><h3 id="1-1-什么是java语言"><a href="#1-1-什么是java语言" class="headerlink" title="1.1 什么是java语言:"></a>1.1 什么是java语言:</h3><p>…</p>
<h3 id="1-2-java发展史"><a href="#1-2-java发展史" class="headerlink" title="1.2 java发展史:"></a>1.2 java发展史:</h3><p>…</p>
<h3 id="1-3-java语言能做什么"><a href="#1-3-java语言能做什么" class="headerlink" title="1.3 java语言能做什么:"></a>1.3 java语言能做什么:</h3><p>…</p>
<h2 id="2-计算机基础知识"><a href="#2-计算机基础知识" class="headerlink" title="2. 计算机基础知识:"></a>2. 计算机基础知识:</h2><h3 id="2-1-二进制"><a href="#2-1-二进制" class="headerlink" title="2.1 二进制:"></a>2.1 二进制:</h3><p>二进制转十进制： ”8421法“;<br>十进制转二进制: “辗转相除法”;</p>
<h3 id="2-2-存储单元"><a href="#2-2-存储单元" class="headerlink" title="2.2 存储单元:"></a>2.2 存储单元:</h3><p>1 Byte(字节) = 8bit(位,比特)<br>1 KB = 1024 Byte<br>1 MB = 1024 KB<br>1 GB = 1024 MB<br>1 TB = 1024 GB<br>1 PB = 1024 TB<br>1 EB = 1024 PB<br>1 ZB = 1024 EB<br><strong>注:</strong></p>
<ul>
<li>进制:<br>1024 = 2^10^</li>
<li>一般网络带宽:<br>100Mbps =&gt;100Mbps /8 = 12.5MB/s</li>
</ul>
<h2 id="3-windows的命令提示符"><a href="#3-windows的命令提示符" class="headerlink" title="3.windows的命令提示符:"></a>3.windows的命令提示符:</h2><p>(我不是第一次使用电脑)</p>
<h1 id="二、java开发环境搭建"><a href="#二、java开发环境搭建" class="headerlink" title="二、java开发环境搭建:"></a>二、java开发环境搭建:</h1><h2 id="1-java虚拟机-–-JVM"><a href="#1-java虚拟机-–-JVM" class="headerlink" title="1. java虚拟机 – JVM:"></a>1. java虚拟机 – JVM:</h2><ul>
<li>jvm: java的运行环境;</li>
<li>跨平台: jvm支持了java的跨平台性; 一次编译,到处运行;</li>
</ul>
<h2 id="2-jre-和-jdk"><a href="#2-jre-和-jdk" class="headerlink" title="2. jre 和 jdk:"></a>2. jre 和 jdk:</h2><ul>
<li>jre: java运行时环境, 包含<code>JVM</code>和运行时所需要的<code>核心类库</code>;</li>
<li>jdk: java的开发工具包, 包含<code>jre</code>和开发所需要的工具;</li>
</ul>
<p><img src="/images/javaLearn/001_6_jdk.png"></p>
<h2 id="3-jdk的下载安装"><a href="#3-jdk的下载安装" class="headerlink" title="3.jdk的下载安装:"></a>3.jdk的下载安装:</h2><p>jdk15:<a href="https://www.oracle.com/java/technologies/javase-jdk15-downloads.html">https://www.oracle.com/java/technologies/javase-jdk15-downloads.html</a><br>jdk8:<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br>其他版本: <a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
<h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量;"></a>4. 配置环境变量;</h2><p><img src="/images/javaLearn/001_1_%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p>
<h1 id="三、HelloWorld入门"><a href="#三、HelloWorld入门" class="headerlink" title="三、HelloWorld入门:"></a>三、HelloWorld入门:</h1><h2 id="1-程序开发步骤说明"><a href="#1-程序开发步骤说明" class="headerlink" title="1. 程序开发步骤说明:"></a>1. 程序开发步骤说明:</h2><p>java程序开发三步骤: <strong>编写、编译、运行</strong><br><img src="/images/javaLearn/001_2_step.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HelloWorld</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译及运行:<br><img src="/images/javaLearn/001_3_runHello.png"><br><strong>每次修改代码后都要重新<code>编译</code></strong></p>
<h2 id="2-java的注释"><a href="#2-java的注释" class="headerlink" title="2. java的注释:"></a>2. java的注释:</h2><p>Java中提供了三种注释方式，分别是：</p>
<ul>
<li>单行注释: <code>//注释内容</code></li>
<li>多行注释: <code>/*注释内容*/</code></li>
<li>文档注释: <code>/**注释内容*/</code></li>
</ul>
<p>其中, 文档注释与多行注释作用基本相同,唯一的区别是文档注释可以使用<code>javadoc.exe</code>命令生成API文档;</p>
<h1 id="四、变量："><a href="#四、变量：" class="headerlink" title="四、变量："></a>四、变量：</h1><h2 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字:"></a>1. 关键字:</h2><p>　　关键字是被Java语言赋予特殊含义, 具有专门用途的单词, 比如之前接触的<code>class</code>, <code>public</code>, <code>static</code>, <code>void</code>均为Java已经预设好的; 你可以先把Java关键字理解为“命令”!<br>　　Java中关键字<code>均为小写</code>，下面是Java中所有关键字:</p>
<p><img src="/images/javaLearn/001_4_%E5%85%B3%E9%94%AE%E5%AD%97.png"></p>
<h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符:"></a>2. 标识符:</h2><p>在Java程序中, 除了关键字以外基本上都是标识符了;<br>标识符就是名称的意思，所有的名称都统称为标识符; Java中经常要定义类、方法、变量, 在定义他们时总要给它们起名字, 这些名字就是标识符; </p>
<p>标识符的规范:</p>
<ul>
<li>组成元素:<ul>
<li>英文字符: <code>a-zA-Z</code>;</li>
<li>数字: <code>0-9</code>;</li>
<li>符号: <code>_与$</code>;</li>
</ul>
</li>
<li>标识符规则:<ul>
<li>数字不能开头;</li>
<li>不可以使用关键字;</li>
<li>严格区分大小写，不限制长度起名时，尽量达到见名知意;</li>
</ul>
</li>
</ul>
<h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量:"></a>3. 常量:</h2><ul>
<li>字符串常量: 凡是用双引号引起来的部分;</li>
<li>整型常量: 直接写上的数字, 没有小数;</li>
<li>字符常量: 使用单引号引起来的单个字符;<strong>单引号内不能没有数据</strong></li>
<li>布尔常量: 只有两种取值: <code>true</code>, <code>false</code>;</li>
<li>空常量: <code>null</code>: 表示没有任何数据; <strong>null不能打印输出</strong></li>
</ul>
<h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型:"></a>4. 数据类型:</h2><h3 id="4-1-分类"><a href="#4-1-分类" class="headerlink" title="4.1 分类:"></a>4.1 分类:</h3><ul>
<li>基本数据类型;</li>
<li>引用数据类型:<code>字符串、类、接口、Lambda</code>；<h3 id="4-2-基本数据类型："><a href="#4-2-基本数据类型：" class="headerlink" title="4.2 基本数据类型："></a>4.2 基本数据类型：</h3></li>
</ul>
<p><strong>四类八种</strong><br><img src="/images/javaLearn/001_5_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p>
<p><strong>注意:</strong></p>
<ul>
<li>字符串不是基本数据类型, 而是引用类型;</li>
<li>浮点型可能只是一个近似值, 并非精确值;</li>
<li>数据范围与字节数不一定相关,例如: <code>float</code>数据范围比<code>long</code>更加广泛, 但是<code>float</code>是4字节, <code>long</code>是8字节;</li>
<li>浮点数当中默认是<code>double</code>; 如果一定要使用<code>float</code>, 需要加后缀<code>F</code>(3.1415F);</li>
<li>整数当中默认是<code>int</code>;如果一定要使用<code>long</code>, 需要加后缀<code>L</code>(123456L);</li>
</ul>
<h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量:"></a>5. 变量:</h2><h3 id="5-1-定义变量-创建变量"><a href="#5-1-定义变量-创建变量" class="headerlink" title="5.1 定义变量(创建变量):"></a>5.1 定义变量(创建变量):</h3><p>定义变量的语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型  变量名  =  数据值；</span><br><span class="line"><span class="keyword">int</span>         a    =  <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>其中<code>int</code>是数据类型, 指定了变量只能存储整数, 而且指定了存储范围为<code>-2147483648～2147483648</code>;<br>其中<code>a</code>表示变量名, 变量名是标识符, 这说明只要是合法的标识符都可以用来做变量名;在程序中可以通过变量名来操作变量(内存中的小盒子);<br>其中<code>=100</code>是给变量赋值, 即向<code>a</code>变量中写入100(变量是个小盒子, 现在小盒子中保存的是100);<br><strong>注意</strong>, 给变量赋的值一定要与类型符合, 也就是说<code>int</code>类型只能存储整数, 而且必须是在<code>-2147483648～2147483648</code>范围内的整数;</p>
<h3 id="5-2-变量使用的注意事项"><a href="#5-2-变量使用的注意事项" class="headerlink" title="5.2 变量使用的注意事项"></a>5.2 变量使用的注意事项</h3><p>使用变量时, 要满足变量的使用规则才可以使用:</p>
<ul>
<li>变量定义后可以不赋值, 使用时再赋值;不赋值不能使用;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    x = <span class="number">20</span>; <span class="comment">//为x赋值20</span></span><br><span class="line">    System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>变量使用时有作用域的限制;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">    System.out.println(y);<span class="comment">//读取y变量中的值失败，失败原因，找不到y变量，因为超出了y变量作用范围，所以不能使用y变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>变量不可以重复定义;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">5.5</span>;<span class="comment">//编译失败，变量重复定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-数据类型转换"><a href="#6-数据类型转换" class="headerlink" title="6. 数据类型转换:"></a>6. 数据类型转换:</h2>不同类型的变量是可以在一起运算的, 但要先进行类型转换再运算;<br>转换的过程中, 数据遵循一个原则:</li>
<li>范围小的数据类型值*如byte), 可以直接转换为范围大的数据类型值(如int);</li>
<li>范围大的数据类型值(如int), 不可以直接转换为范围小的数据类型值(如byte);</li>
</ul>
<p>将各种数据类型按照数据范围从小到大依次列出：<br><code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></p>
<h3 id="6-1-自动类型转换"><a href="#6-1-自动类型转换" class="headerlink" title="6.1 自动类型转换"></a>6.1 自动类型转换</h3><p>表示范围小的数据类型转换成范围大的数据类型, 这种方式称为<em>自动类型转换</em>;</p>
<p>自动类型转换格式:<br><code>范围大的数据类型 变量 = 范围小的数据类型值;</code><br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = i;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-强制类型转换"><a href="#6-2-强制类型转换" class="headerlink" title="6.2 强制类型转换"></a>6.2 强制类型转换</h3><p>表示范围大的数据类型转换成范围小的数据类型, 这种方式称为<em>强制类型转换</em>;</p>
<p>强制类型转换格式:<br><code>范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;</code><br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  i = (<span class="keyword">int</span>)<span class="number">6.718</span>;   <span class="comment">//i的值为6</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">double</span>  d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span>  i2 = (<span class="keyword">int</span>)d;     <span class="comment">//i2的值为3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>强制类型转换,可能存在<strong>数据溢出(整型)**或</strong>精度损失(浮点)**的情况;</li>
<li><code>char</code>类型进行数学运算, 那么字符就会按照ASCII翻译成<code>int</code>;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(`A` + <span class="number">1</span>);    <span class="comment">// 66</span></span><br></pre></td></tr></table></figure></li>
<li><code>byte, short, char</code>在进行数学运算时都会被提升成<code>int</code>;</li>
</ul>
<h2 id="7-ASCII码表"><a href="#7-ASCII码表" class="headerlink" title="7.ASCII码表:"></a>7.ASCII码表:</h2><h3 id="7-1-why"><a href="#7-1-why" class="headerlink" title="7.1 why:"></a>7.1 why:</h3><p>数字和字符的对照关系表(编码表);</p>
<h3 id="7-2-what"><a href="#7-2-what" class="headerlink" title="7.2 what:"></a>7.2 what:</h3><ul>
<li>ASCII码表: 美国信息交换标准代码;</li>
<li>Unicode码: 万国码, 开头0~127部分和ASCII完全一样, 后续部分包含更多字符;</li>
<li>Emoji:表情也是一种对应的码表;</li>
</ul>
<p>常见对应关系:</p>
<ul>
<li>48 =&gt; ‘0’;</li>
<li>65 =&gt; ‘A’;</li>
<li>97 =&gt; ‘a’;</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习002之运算符</title>
    <url>/2021/01/10/java_002_Operation/</url>
    <content><![CDATA[<h1 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符:"></a>一、算数运算符:</h1><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符:"></a>1. 算数运算符:</h2><p>运算符是用来计算数据的符号; 数据可以是常量, 也可以是变量; 被运算符操作的数我们称为<strong>操作数</strong><br>|运算符|运算规则|范例|结果|<br>|-|-|-|-|<br>|+|正号|+3|3|<br>|+|加|2+3|5|<br>|+|连接字符串|“中”+“国”|“中国”|<br>|-|负号|int a=3;-a|-3|<br>|-|减|3-1|2|<br>|<em>|乘|2</em>3|6|<br>|/|除|5/2|2|<br>|%|取模|5/2|1|<br>|++|自增|int a=1;a++/++a|2|<br>|–|自减|int b=3;a–/–a|2|</p>
<p><strong>注意:</strong></p>
<ul>
<li>加法运算符在连接字符串时要注意, 只有直接与字符串相加才会转成字符串;</li>
<li>除法”/“当两边为整数时, 取整数部分, 舍余数; 当其中一边为浮点型时, 按正常规则相除;</li>
<li>“%”为整除取余符号, 小数取余没有意义; 结果符号与被取余符号相同;</li>
<li>整数做被除数, 0不能做除数,否则报错;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 算术运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 常量使用算数运算符</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		System.out.println(<span class="number">10</span>+<span class="number">20</span>);  <span class="comment">// 30</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 变量使用算数运算符</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">		<span class="comment">//&quot;+&quot;作为加法运算使用</span></span><br><span class="line">		<span class="keyword">int</span> z = x + y; </span><br><span class="line">		<span class="comment">//&quot;+&quot;作为连接字符串使用</span></span><br><span class="line">		System.out.println(<span class="string">&quot;x=&quot;</span>+x); <span class="comment">// x=10</span></span><br><span class="line">		System.out.println(<span class="string">&quot;y=&quot;</span>+y); <span class="comment">// y=20</span></span><br><span class="line">		System.out.println(<span class="string">&quot;z=&quot;</span>+z); <span class="comment">// z=30</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-自增-自减运算符"><a href="#2-自增-自减运算符" class="headerlink" title="2. 自增/自减运算符:"></a>2. 自增/自减运算符:</h2><h3 id="2-1-基本含义"><a href="#2-1-基本含义" class="headerlink" title="2.1 基本含义"></a>2.1 基本含义</h3><ul>
<li>++: 运算符, 会在原有值的基础上自增1;</li>
<li>–: 运算符, 会在原有值的基础上自减1;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">++a;</span><br><span class="line">--b;</span><br><span class="line">System.out.println(a);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(b);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>方式:</p>
<ul>
<li>单独使用: 不和其他任何操作作混合, 自己独立成为一个步骤;</li>
<li>混合使用: 和其他操作混合;</li>
</ul>
<p>区别:</p>
<ul>
<li>在独立使用的时候, <code>++a</code>和<code>a++</code>没有区别;</li>
<li>在混合使用时:<ul>
<li><code>++a</code>: 先自增再与其他操作运算;</li>
<li><code>a++</code>: 先将原值(或 当前值)与其他操作运算, 变量再自增;</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = ++a + <span class="number">10</span>;</span><br><span class="line">System.out.println(a);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(b);  <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">c = d++ + <span class="number">10</span>;</span><br><span class="line">System.out.println(c);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(d); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<h1 id="二、赋值运算符："><a href="#二、赋值运算符：" class="headerlink" title="二、赋值运算符："></a>二、赋值运算符：</h1><h1 id="三、比较运算符："><a href="#三、比较运算符：" class="headerlink" title="三、比较运算符："></a>三、比较运算符：</h1><h1 id="四、逻辑运算符："><a href="#四、逻辑运算符：" class="headerlink" title="四、逻辑运算符："></a>四、逻辑运算符：</h1><h1 id="五、三元运算符："><a href="#五、三元运算符：" class="headerlink" title="五、三元运算符："></a>五、三元运算符：</h1>]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习003之方法</title>
    <url>/2021/01/10/java_003_Function/</url>
    <content><![CDATA[<h1 id="一、方法入门："><a href="#一、方法入门：" class="headerlink" title="一、方法入门："></a>一、方法入门：</h1><h2 id="1-方法的定义："><a href="#1-方法的定义：" class="headerlink" title="1. 方法的定义："></a>1. 方法的定义：</h2><h3 id="1-1-定义格式："><a href="#1-1-定义格式：" class="headerlink" title="1.1 定义格式："></a>1.1 定义格式：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    功能代码;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>python标准库01</title>
    <url>/2021/01/04/python_001_Index/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述:"></a>一、概述:</h1><p>本项目用来记录学习过程中的代码:<a href="https://github.com/chengfeiZhou/PythonLearn">https://github.com/chengfeiZhou/PythonLearn</a><br>python官方包索引:<a href="https://pypi.org/">https://pypi.org/</a></p>
<h1 id="二、内置函数"><a href="#二、内置函数" class="headerlink" title="二、内置函数:"></a>二、内置函数:</h1><h2 id="1-abs-x-绝对值"><a href="#1-abs-x-绝对值" class="headerlink" title="1. abs(x): 绝对值:"></a>1. abs(x): 绝对值:</h2><p>返回一个数的绝对值. 参数可以是整数、浮点数或任何实现了<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__abs__"><code>__abs__()</code></a>的对象. 如果参数是一个复数, 则返回它的模</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;绝对值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = -<span class="number">1</span></span><br><span class="line">    b = <span class="number">3.14</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    d = Num(<span class="number">666</span>)</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(a)&#125;</span>&quot;</span>)   <span class="comment"># -1的绝对值是: 1</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(b)&#125;</span>&quot;</span>)   <span class="comment"># 3.14的绝对值是: 3.14</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(c)&#125;</span>&quot;</span>)   <span class="comment"># 0的绝对值是: 0</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;d&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(d)&#125;</span>&quot;</span>)   <span class="comment"># &lt;__main__.Num object at 0x7feaaca58350&gt;的绝对值是: 绝对值</span></span><br></pre></td></tr></table></figure>
<h2 id="2-all-iterable-amp-any-iterable-判断元素真值"><a href="#2-all-iterable-amp-any-iterable-判断元素真值" class="headerlink" title="2. all(iterable) &amp; any(iterable): 判断元素真值:"></a>2. all(iterable) &amp; any(iterable): 判断元素真值:</h2><h3 id="2-1-all-iterable"><a href="#2-1-all-iterable" class="headerlink" title="2.1 all(iterable):"></a>2.1 all(iterable):</h3><p>如果<code>iterable</code>的所有元素均为真值(或可迭代对象为空)则返回<code>True</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-any-iterable"><a href="#2-2-any-iterable" class="headerlink" title="2.2 any(iterable):"></a>2.2 any(iterable):</h3><p>如果<code>iterable</code>的任一元素为真值则返回<code>True</code>. 如果可迭代对象为空, 返回<code>False</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-例子"><a href="#2-3-例子" class="headerlink" title="2.3 例子:"></a>2.3 例子:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">    arr2 = [<span class="string">&quot;&quot;</span>, &#123;&#125;, <span class="number">0</span>]</span><br><span class="line">    print(<span class="string">f&quot;arr1的all: <span class="subst">&#123;<span class="built_in">all</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr2的all: <span class="subst">&#123;<span class="built_in">all</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr2的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: True</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: False</span></span><br></pre></td></tr></table></figure>
<h2 id="3-ascii-object-返回对象可打印的字符串的转义"><a href="#3-ascii-object-返回对象可打印的字符串的转义" class="headerlink" title="3. ascii(object): 返回对象可打印的字符串的转义:"></a>3. ascii(object): 返回对象可打印的字符串的转义:</h2><p>就像函数<code>repr()</code>, 返回一个对象可打印的字符串, 但是<code>repr()</code>返回的字符串中非 ASCII 编码的字符,会使用 <code>\x</code>、<code>\u</code>和<code>\U</code>来转义. 生成的字符串和 Python2 的<code>repr()</code>返回的结果相似.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个类的repr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="number">12345567</span>))  <span class="comment">#  12345567</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;hello world!&quot;</span>)) <span class="comment"># &#x27;hello world!&#x27;</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;你好!&quot;</span>))    <span class="comment"># &#x27;\u4f60\u597d!&#x27;</span></span><br><span class="line"></span><br><span class="line">    s = Stu()</span><br><span class="line">    t = Teacher()</span><br><span class="line">    print(<span class="built_in">ascii</span>(s)) <span class="comment"># \u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684repr</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(t)) <span class="comment"># &lt;__main__.Teacher object at 0x7fd100259350</span></span><br></pre></td></tr></table></figure>
<h2 id="4-bin-x-整数二进制"><a href="#4-bin-x-整数二进制" class="headerlink" title="4. bin(x): 整数二进制:"></a>4. bin(x): 整数二进制:</h2><p>将一个整数转变为一个前缀为”0b”的二进制字符串. 结果是一个合法的 Python 表达式. 如果 x 不是 Python 的 <code>int</code> 对象，那它需要定义 <code>__index__()</code> 方法返回一个整数. 一些例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(3)</span></span><br><span class="line">&#x27;0b11&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(-10)</span></span><br><span class="line">&#x27;-0b1010&#x27;</span><br></pre></td></tr></table></figure>
<p>如果不一定需要前缀“0b”，还可以使用如下的方法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; format(14, <span class="string">&#x27;#b&#x27;</span>), format(14, <span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f<span class="string">&#x27;&#123;14:#b&#125;&#x27;</span>, f<span class="string">&#x27;&#123;14:b&#125;&#x27;</span></span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="5-class-bool-x"><a href="#5-class-bool-x" class="headerlink" title="5. class bool([x]):"></a>5. class bool([x]):</h2><p><code>在 3.7 版更改: x 现在只能作为位置参数</code><br>返回一个布尔, <code>True</code> 或者 <code>False</code>.  x 使用标准的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#truth">真值测试过程</a> 来转换. 如果 x 是假的或者被省略, 返回 <code>False</code>; 其他情况返回 <code>True</code>. <code>bool</code> 类是 <code>int</code> 的子类(参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a>). 其他类不能继承自它.它只有 <code>False</code> 和 <code>True</code> 两个实例.</p>
<h2 id="6-breakpoint-args-kws-断点调试"><a href="#6-breakpoint-args-kws-断点调试" class="headerlink" title="6. breakpoint(*args, **kws):断点调试:"></a>6. breakpoint(*args, **kws):断点调试:</h2><p><code>3.7 新版功能</code><br><code>简单可以理解为是一个debug打点函数</code><br>此函数会在调用时将你陷入调试器中. 具体来说, 它调用 <code>sys.breakpointhook()</code>, 直接传递 <code>args</code> 和 <code>kws</code>. 默认情况下, <code>sys.breakpointhook()</code> 调用 <code>pdb.set_trace()</code> 且没有参数. 在这种情况下, 它纯粹是一个便利函数, 因此您不必显式导入 <code>pdb</code> 且键入尽可能少的代码即可进入调试器. 但是, <code>sys.breakpointhook()</code> 可以设置为其他一些函数并被 <code>breakpoint()</code> 自动调用, 以允许进入你想用的调试器.<code>引发一个 审计事件</code>builtins.breakpoint<code>并附带参数</code>breakpointhook`.<br><a href="https://www.jianshu.com/p/5d3c52c5c2a2">详细参看</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    str1 = <span class="string">&quot;hello world! d你好, 世界!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="built_in">breakpoint</span>()</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pythonIndex/06_breakpoint.png"><br>Tips:</p>
<ul>
<li>命令 <code>p</code> 用于查看表达式的值; </li>
<li>命令 <code>c</code> 用于退出调试器, 并继续执行程序;</li>
</ul>
<h2 id="7-class-bytearray-amp-class-bytes"><a href="#7-class-bytearray-amp-class-bytes" class="headerlink" title="7. class bytearray() &amp; class bytes():"></a>7. class bytearray() &amp; class bytes():</h2><h3 id="7-1-class-bytearray-source-encoding-errors"><a href="#7-1-class-bytearray-source-encoding-errors" class="headerlink" title="7.1 class bytearray([source[, encoding[, errors]]]):"></a>7.1 class bytearray([source[, encoding[, errors]]]):</h3><p>返回一个新的 bytes 数组. bytearray 类是一个可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. 它有<code>可变序列类型</code>大部分常见的方法；同时有 <code>bytes</code> 类型的大部分方法。<br>可选形参 source 可以用不同的方式来初始化数组：</p>
<ul>
<li>如果是一个<code>string</code>,您必须提供<code>encoding</code>参数(errors 参数仍是可选的); <code>bytearray()</code>会使用 <code>str.encode()</code>方法来将 string 转变成 bytes;</li>
<li>如果是一个<code>integer</code>, 会初始化大小为该数字的数组, 并使用 null 字节填充.</li>
<li>如果是一个遵循 <code>缓冲区接口</code> 的对象, 该对象的只读缓冲区将被用来初始化字节数组;</li>
<li>如果是一个 <code>iterable</code> 可迭代对象, 它的元素的范围必须是 <code>0 &lt;= x &lt; 256</code> 的整数, 它会被用作数组的初始内容;</li>
<li>如果没有实参, 则创建大小为 <code>0</code>的数组;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strB = <span class="built_in">bytearray</span>(<span class="string">&quot;hello world&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    intB = <span class="built_in">bytearray</span>(<span class="number">4</span>)</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">128</span>])</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    print(strB)</span><br><span class="line">    print(intB)</span><br><span class="line">    print(iterB)</span><br><span class="line">    print(iterB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./7_1_bytearray.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bufferB = <span class="built_in">bytearray</span>(f.read(), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        print(bufferB)</span><br></pre></td></tr></table></figure>
<img src="/images/pythonIndex/7_1_butearray.png"></li>
</ul>
<h3 id="7-2-class-bytes-source-encoding-errors"><a href="#7-2-class-bytes-source-encoding-errors" class="headerlink" title="7.2 class bytes([source[, encoding[, errors]]])"></a>7.2 class bytes([source[, encoding[, errors]]])</h3><p>返回一个新的<code>bytes</code>对象, 是一个不可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. <code>bytes</code> 是 <code>bytearray</code> 的不可变版本 - 它有其中不改变序列的方法和相同的索引、切片操作;<br>因此，构造函数的实参和 <code>bytearray()</code> 相同;<br>字节对象还可以用字面值创建;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strB = <span class="built_in">bytes</span>(<span class="string">&quot;hello world&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    intB = <span class="built_in">bytes</span>(<span class="number">4</span>)</span><br><span class="line">    iterB = <span class="built_in">bytes</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">128</span>])</span><br><span class="line">    iterB = <span class="built_in">bytes</span>()</span><br><span class="line"></span><br><span class="line">    print(strB)</span><br><span class="line">    print(intB)</span><br><span class="line">    print(iterB)</span><br><span class="line">    print(iterB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./06_breakpoint.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bufferB = <span class="built_in">bytes</span>(f.read(), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        print(bufferB)</span><br></pre></td></tr></table></figure>
<h3 id="7-3-补充"><a href="#7-3-补充" class="headerlink" title="7.3 补充:"></a>7.3 补充:</h3><p>另见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binaryseq">二进制序列类型 — bytes, bytearray, memoryview</a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typebytes">bytes 对象</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>;</p>
<h2 id="8-callable-object-判断可调用"><a href="#8-callable-object-判断可调用" class="headerlink" title="8.callable(object): 判断可调用:"></a>8.callable(object): 判断可调用:</h2><p>如果返回<code>Flase</code>, 则<code>object</code>不可被调用; 如果返回<code>True</code>,则<code>object</code>可被调用,但有可能失败; 请注意类是可调用的(调用类将返回一个新的实例); 如果实例所属的类有 <code>__call__()</code> 则它就是可调用的;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;调用test1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化Test2&quot;</span>)</span><br><span class="line"></span><br><span class="line">test3 = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(test1): <span class="comment"># 调用test1</span></span><br><span class="line">        test1()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(Test2): <span class="comment"># 实例化Test2</span></span><br><span class="line">        t2 = Test2()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(test3): <span class="comment"># 不可调用</span></span><br><span class="line">        test3()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="9-chr-i-返回i对应的unicode"><a href="#9-chr-i-返回i对应的unicode" class="headerlink" title="9. chr(i): 返回i对应的unicode:"></a>9. chr(i): 返回i对应的unicode:</h2><p>返回 Unicode 码位为整数 i 的字符的字符串格式;例如,<code>chr(97)</code> 返回字符串 <code>&#39;a&#39;</code>，<code>chr(8364)</code> 返回字符串 <code>&#39;€&#39;</code>; 这是 <code>ord()</code> 的逆函数;<br>实参的合法范围是 0 到 1,114,111(16 进制表示是 0x10FFFF); 如果 i 超过这个范围，会触发 <code>ValueError</code> 异常;</p>
<h2 id="10-classmethod-一个方法封装成类方法"><a href="#10-classmethod-一个方法封装成类方法" class="headerlink" title="10. @classmethod: 一个方法封装成类方法:"></a>10. @classmethod: 一个方法封装成类方法:</h2><p>把一个方法封装成类方法;<br>一个类方法把类自己作为第一个实参, 就像一个实例方法把实例自己作为第一个实参; 请用以下习惯来声明类方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">cls, arg1, arg2, ...</span>):</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p><code>@classmethod</code> 这样的形式称为函数的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">decorator</a> – 详情参阅 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function">函数定义</a></p>
<p>类方法的调用可以在类上进行 (例如 <code>C.f()</code>) 也可以在实例上进行 (例如 <code>C().f()</code>); 其所属类以外的类实例会被忽略。 如果类方法在其所属类的派生类上调用，则该派生类对象会被作为隐含的第一个参数被传入;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        print(<span class="string">&quot;实例化Test&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;hello, <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;你好, <span class="subst">&#123;cls.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Test.hello()    <span class="comment"># 你好, 李四</span></span><br><span class="line"></span><br><span class="line">    Test().say()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    hello, 张三</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    Test().hello()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    你好, 李四</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    Test.name = <span class="string">&quot;王五&quot;</span></span><br><span class="line">    Test.hello() <span class="comment"># 你好, 王五</span></span><br><span class="line"></span><br><span class="line">    Test().hello()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    你好, 王五</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类方法与 C++ 或 Java 中的静态方法不同;</p>
<p>在 3.9 版更改: 类方法现在可以包装其他 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">装饰器</a>;</p>
<h2 id="11-compile-source-filename-mode-flags-0-dont-inherit-False-optimize-1-编译成代码或AST对象"><a href="#11-compile-source-filename-mode-flags-0-dont-inherit-False-optimize-1-编译成代码或AST对象" class="headerlink" title="11. compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1): 编译成代码或AST对象:"></a>11. compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1): 编译成代码或AST对象:</h2><p>将 <code>source</code> 编译成代码或 <code>AST</code> 对象;代码对象可以被 <code>exec()</code> 或 <code>eval()</code> 执行; </p>
<ul>
<li><code>source</code>: 可以是常规的字符串、字节字符串，或者 <code>AST</code> 对象;</li>
<li><code>filename</code>: 实参需要是代码读取的文件名; 如果代码不需要从文件中读取, 可以传入一些可辨识的值(经常会使用 <code>&#39;&lt;string&gt;&#39;</code>);</li>
<li><code>mode</code>:  实参指定了编译代码必须用的模式;<ul>
<li><code>source</code> 是语句序列, 可以是 <code>&#39;exec&#39;</code>;</li>
<li>单一表达式, 可以是 <code>&#39;eval&#39;</code>;</li>
<li>单个交互式语句, 可以是 <code>&#39;single&#39;</code>;</li>
<li>表达式执行结果不是 <code>None</code> 将会被打印出来;</li>
</ul>
</li>
<li><code>flags</code> 和 <code>dont_inherit</code>: 可选参数, 制应当激活哪个 <a href="https://docs.python.org/zh-cn/3/library/ast.html#module-ast">编译器选项</a> 以及应当允许哪个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#future">future 特性</a><ul>
<li>编译器选项和 future 语句是由比特位来指明的; 比特位可以通过一起按位 <code>OR</code> 来指明多个选项; <ul>
<li>指明特定 <code>future</code> 特性所需的比特位可以在 <a href="https://docs.python.org/zh-cn/3/library/__future__.html#module-__future__"><code>__future__</code></a> 模块的 <code>_Feature</code> 实例的 <code>compiler_flag</code> 属性中找到;</li>
<li>编译器旗标 可以在 <a href="https://docs.python.org/zh-cn/3/library/ast.html#compiler-flags"><code>ast</code></a> 模块中查找带有 <code>PyCF_</code> 前缀的名称;</li>
</ul>
</li>
</ul>
</li>
<li><code>optimize</code> 实参指定编译器的优化级别:<ul>
<li>默认值 <code>-1</code> 选择与解释器的 <code>-O</code> 选项相同的优化级别;</li>
<li>显式级别为<code>0</code>: 没有优化; <code>__debug__</code> 为真;</li>
<li>显式级别为<code>1</code>: 断言被删除, <code>__debug__</code> 为假;</li>
<li>显式级别为<code>2</code>: (文档字符串也被删除);</li>
</ul>
</li>
</ul>
<p>如果编译的源码不合法, 此函数会触发 <code>SyntaxError</code>异常;<br>如果源码包含 <code>null</code> 字节，则会触发 <code>ValueError</code> 异常;<br><em>历史修改:</em></p>
<ul>
<li>在 3.2 版更改: 允许使用 Windows 和 Mac 的换行符; 在 <code>&#39;exec&#39;</code> 模式不再需要以换行符结尾; 增加了 optimize 形参;</li>
<li>在 3.5 版更改: 之前 source 中包含 null 字节的话会触发 <code>TypeError </code>异常;</li>
<li>3.8 新版功能: <code>ast.PyCF_ALLOW_TOP_LEVEL_AWAIT</code>现在可在旗标中传入以启用对最高层级 <code>await</code>, <code>async for</code> 和 <code>async with</code> 的支持;</li>
</ul>
<p><strong>警告:</strong><br>在将足够大或者足够复杂的字符串编译成 <code>AST</code> 对象时, <code>Python</code> 解释器有可能因为 <code>Python AST</code> 编译器的栈深度限制而崩溃;</p>
<h2 id="12-class-complex-real-imag-复数类"><a href="#12-class-complex-real-imag-复数类" class="headerlink" title="12. class complex([real[, imag]]): 复数类:"></a>12. class complex([real[, imag]]): 复数类:</h2><p>返回值为 <code>real + imag*1j</code> 的复数, 或将字符串或数字转换为复数;</p>
<ul>
<li>如果第一个形参是字符串, 则它被解释为一个复数, 并且函数调用时必须没有第二个形参;</li>
<li>第二个形参不能是字符串; </li>
<li>每个实参都可以是任意的数值类型(包括复数);</li>
<li>如果省略了 <code>imag</code>, 则默认值为零, 构造函数会像 <code>int</code> 和 <code>float</code>一样进行数值转换;<br>如果两个实参都省略,则返回 <code>0j</code>;</li>
</ul>
<p>对于一个普通 Python 对象 <code>x</code>，<code>complex(x)</code> 会委托给 <code>x.__complex__()</code>;如果 <code>__complex__()</code> 未定义则将回退至 <code>__float__()</code>; 如果 <code>__float__()</code> 未定义则将回退至<code> __index__()</code></p>
<blockquote>
<p><strong>注解</strong> 当从字符串转换时, 字符串在 <code>+</code> 或 <code>-</code> 的周围必须不能有空格;<br>例如 <code>complex(&#39;1+2j&#39;)</code> 是合法的，但 <code>complex(&#39;1 + 2j&#39;)</code> 会触发 <code>ValueError</code> 异常;</p>
</blockquote>
<p><strong>历史:</strong></p>
<ul>
<li>在 3.6 版更改: 您可以使用下划线将代码文字中的数字进行分组。</li>
<li>在 3.8 版更改: 如果 <code>__complex__()</code> 和 <code>__float__()</code> 未定义则回退至 <code>__index__()</code>;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span>(<span class="params"><span class="built_in">object</span></span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化test3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化test4&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__complex__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t1 = <span class="built_in">complex</span>(<span class="string">&quot;2+3j&quot;</span>)</span><br><span class="line">    t2 = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    print(t1)   <span class="comment"># (2+3j)</span></span><br><span class="line">    print(t2)   <span class="comment"># (4+6j)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TypeError: complex() first argument must be a string or a number, not &#x27;Test3&#x27;</span></span><br><span class="line">    <span class="comment"># t3 = complex(Test3())   </span></span><br><span class="line">    <span class="comment"># print(t3)</span></span><br><span class="line"></span><br><span class="line">    t4 = <span class="built_in">complex</span>(Test4())   <span class="comment"># 实例化test4</span></span><br><span class="line">    print(t4)   <span class="comment"># (3+4j)</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
        <category>标准库</category>
        <category>内置函数</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java spring 入门一</title>
    <url>/2021/01/13/javaSpring-001/</url>
    <content><![CDATA[<h1 id="一、spring介绍"><a href="#一、spring介绍" class="headerlink" title="一、spring介绍:"></a>一、spring介绍:</h1><h2 id="1-spring是什么"><a href="#1-spring是什么" class="headerlink" title="1. spring是什么:"></a>1. spring是什么:</h2><p>Spring是分层的Java SE/EE应用full-stack轻量级开源框架, 以<code>IoC</code>(反转控制)和<code>AOP</code>(面向切面编程)为内核;<br>提供<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBC Template</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术, 还能整合开源世界众多著名的第三方框架爱和类库;</p>
<h2 id="2-spring发展"><a href="#2-spring发展" class="headerlink" title="2. spring发展;"></a>2. spring发展;</h2><p>…</p>
<h2 id="3-spring优势"><a href="#3-spring优势" class="headerlink" title="3.spring优势:"></a>3.spring优势:</h2><ul>
<li><strong>方便解耦, 简化开发</strong>:通过Spring提供的IoC容器, 可以将对象间的依赖交由Spring进行控制,避免硬编码所造成的的过渡耦合;用户不必再为单例模式类、属性文件解析等底层需求写代码, 而更专注于上层应用;</li>
<li><strong>AOP编程的支持</strong>: 许多不易用传统OOP实现的功能可以通过AOP轻松实现;</li>
<li><strong>声明式事务支持</strong>: 通过配置的方式, 解放事务管理代码;</li>
<li><strong>方便程序测试</strong>:</li>
<li><strong>方便集成各种优秀的框架</strong>:</li>
<li><strong>降低了JavaEE API的使用难度</strong>: spring对javaEE进行了薄封装, 使API使用难度降低;</li>
<li><strong>java源码典范</strong>: spring设计的妙啊;</li>
</ul>
<h2 id="4-spring的体系结构"><a href="#4-spring的体系结构" class="headerlink" title="4. spring的体系结构:"></a>4. spring的体系结构:</h2><p><img src="/images/javaSpringLearn/001_SpringFramework.png"></p>
<h1 id="二、Spring快速入门"><a href="#二、Spring快速入门" class="headerlink" title="二、Spring快速入门:"></a>二、Spring快速入门:</h1><h2 id="1-spring程序开发步骤"><a href="#1-spring程序开发步骤" class="headerlink" title="1. spring程序开发步骤:"></a>1. spring程序开发步骤:</h2><ul>
<li>导入spring的maven坐标;</li>
<li>编写DAO(如: userDaolmpl)接口和实现类;</li>
<li>创建spring核心xml配置文件;</li>
<li>在xml配置文件中配置userDaolmpl;</li>
<li>通过spring的API获取Bean实例;</li>
</ul>
<h2 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示:"></a>2. 代码演示:</h2><ul>
<li>导入spring:<br><code>/spring/spring_ioc/pom.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.zhouchengfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写DAO(如: userDaolmpl)接口和实现类:<br><code>spring/spring_ioc/src/main/java/com/itheima/dao/UserDao.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDao.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建spring核心xml配置文件;<br><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- add bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>通过spring的API获取Bean实例:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、spring配置文件"><a href="#三、spring配置文件" class="headerlink" title="三、spring配置文件:"></a>三、spring配置文件:</h1><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><h2 id="1-Bean标签"><a href="#1-Bean标签" class="headerlink" title="1. Bean标签:"></a>1. Bean标签:</h2><h3 id="1-1-基本配置"><a href="#1-1-基本配置" class="headerlink" title="1.1 基本配置:"></a>1.1 基本配置:</h3></li>
<li>id: 唯一标识;</li>
<li>class: 全限定名; 必须存在”无参构造函数”;<h3 id="1-2-范围配置"><a href="#1-2-范围配置" class="headerlink" title="1.2 范围配置:"></a>1.2 范围配置:</h3>scope: 指对象的作用范围, 取值如下:<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td>(默认值)单例的</td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>Web项目中, Spring创建一个Bean对象, 将对象存入到request域中</td>
</tr>
<tr>
<td>session</td>
<td>Web项目中, Spring创建一个Bean对象, 将对象存入到session域中</td>
</tr>
<tr>
<td>global session</td>
<td>Web项目中, 应用在Portlet环境, 如果没有Portlet环境, <code>global session</code>相当于session</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="使用junit进行测试scope属性"><a href="#使用junit进行测试scope属性" class="headerlink" title="使用junit进行测试scope属性:"></a>使用<code>junit</code>进行测试<code>scope</code>属性:</h4><h5 id="a-singleton与prototype"><a href="#a-singleton与prototype" class="headerlink" title="a. singleton与prototype:"></a>a. <code>singleton</code>与<code>prototype</code>:</h5><ul>
<li>注册<code>junit</code>:</li>
</ul>
<p><code>pring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.zhouchengfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>单元测试代码:<br><code>spring/spring_ioc/src/test/java/com/itheima/test/SpringTest.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试scope属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        UserDao userDao2 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        System.out.println(userDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-实例创建时机不同"><a href="#b-实例创建时机不同" class="headerlink" title="b. 实例创建时机不同:"></a>b. 实例创建时机不同:</h5><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增加一个无参构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试结果:</li>
<li>scope=”singleton”:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1fe20588</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1fe20588</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意:</strong><br>对象的创建是在加载配置文件的时就创建了;</p>
<ul>
<li>scope=”prototype”:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@14d3bc22</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@12d4bf7e</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意:</strong><br>对象的创建是在加载配置文件的时没有创建, 而是在<code>getBean</code>的时候创建;</p>
<h5 id="c-结论"><a href="#c-结论" class="headerlink" title="c.结论:"></a>c.结论:</h5><table>
<thead>
<tr>
<th></th>
<th>singleton</th>
<th>prototype</th>
</tr>
</thead>
<tbody><tr>
<td>Bean的实例化个数</td>
<td>1个</td>
<td>多个</td>
</tr>
<tr>
<td>Bean的实例化时机</td>
<td>当Spring核心文件被加载时, 实例化配置的Bean示例</td>
<td>当调用getBean()时实例化Bean</td>
</tr>
<tr>
<td>Bean的生命周期</td>
<td>1. 对象创建: 当应用加载, 创建容器时, 对象就被创建了;<br/>2. 对象运行: 只要容器在, 对象一直活着;<br/>3. 对象销毁: 当应用卸载, 销毁容器时, 对象就被销毁;</td>
<td>1. 对象创建: 当时用对象时, 创建新的对象示例;<br/>对象运行: 只要对象在使用, 就一直活着;<br/>3. 对象销毁: 当对象长时间不使用, 被java GC;</td>
</tr>
</tbody></table>
<h3 id="1-3-生命周期配置"><a href="#1-3-生命周期配置" class="headerlink" title="1.3 生命周期配置:"></a>1.3 生命周期配置:</h3><ul>
<li>init-method: 指定类中的初始化方法;</li>
<li>destroy-method: 指定类中销毁方法名称;</li>
</ul>
<p><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是初始化方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是销毁方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        app.close(); <span class="comment">// 手动关闭容器;</span></span><br><span class="line">        <span class="comment">// ApplicationContext: 没有关闭方法, 但是其子类ClassPathXmlApplicationContext 有关闭方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">这是初始化方法...</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@61dd025</span><br><span class="line">1月 14, 2021 6:41:51 下午 org.springframework.context.support.AbstractApplicationContext doClose</span><br><span class="line">信息: ...</span><br><span class="line">这是销毁方法...</span><br></pre></td></tr></table></figure>
<h3 id="1-4-Bean实例化配置"><a href="#1-4-Bean实例化配置" class="headerlink" title="1.4 Bean实例化配置:"></a>1.4 Bean实例化配置:</h3><ul>
<li><strong>无参构造方法</strong>实例化;</li>
<li><strong>工厂静态方法</strong>实例化;</li>
<li><strong>工厂实例方法</strong>实例化; </li>
</ul>
<h4 id="a-工厂静态方法"><a href="#a-工厂静态方法" class="headerlink" title="a.工厂静态方法:"></a>a.工厂静态方法:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/factory/StaticFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/test/java/com/itheima/test/SpringTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试静态工厂构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1a04f701</span><br></pre></td></tr></table></figure>
<h4 id="b-工厂实例方法"><a href="#b-工厂实例方法" class="headerlink" title="b.工厂实例方法:"></a>b.工厂实例方法:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/factory/DynamicFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  工厂静态构造    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  工厂实例构造  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-Bean的依赖注入–对象"><a href="#1-5-Bean的依赖注入–对象" class="headerlink" title="1.5 Bean的依赖注入–对象:"></a>1.5 Bean的依赖注入–对象:</h3><h4 id="a-一般方式注入"><a href="#a-一般方式注入" class="headerlink" title="a.一般方式注入:"></a>a.一般方式注入:</h4><p>方式: 在业务代码中获取dao<br><code>spring/spring_ioc/src/main/java/com/itheima/service/UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 从容器中获取Dao</span></span><br><span class="line">       ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">       userDao.save();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  依赖注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务代码:</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">sace running......</span><br></pre></td></tr></table></figure>
<h4 id="b-依赖注入分析"><a href="#b-依赖注入分析" class="headerlink" title="b.依赖注入分析:"></a>b.依赖注入分析:</h4><ul>
<li>依赖注入: 它是spring框架核心IOC的具体实现;</li>
<li>在编写程序时,通过控制反转, 把对象创建交给spring, 但是代码中不可能出现没有依赖的情况;</li>
<li>IOC解耦只是降低了他们的依赖关系, 但不会消除; 例如: 业务层仍会调用持久层的方法;</li>
<li>这种业务层和持久层的依赖关系, 在使用spring之后, 就让spring类维护了;</li>
<li>简单的说, 就是坐等框架把持久层对象传入业务层, 而不用自己来获取;</li>
</ul>
<h4 id="c-依赖注入的方式"><a href="#c-依赖注入的方式" class="headerlink" title="c.依赖注入的方式:"></a>c.依赖注入的方式:</h4><ul>
<li><strong>构造方法</strong>;</li>
<li><strong>set方法</strong>;</li>
</ul>
<h4 id="d-使用set方法注入"><a href="#d-使用set方法注入" class="headerlink" title="d.使用set方法注入:"></a>d.使用set方法注入:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/service/UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public void save() &#123;</span></span><br><span class="line"><span class="comment">//        // 从容器中获取Dao</span></span><br><span class="line"><span class="comment">//        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        UserDao userDao = (UserDao) app.getBean(&quot;userDao&quot;);</span></span><br><span class="line"><span class="comment">//        userDao.save();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  依赖注入: set方法  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象的引用用`ref`; 把&quot;容器&quot;内部的&quot;userDao&quot;,通过&quot;userService&quot;的&quot;setUserDao&quot;方法注入给&quot;userService&quot;          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务代码:</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">sace running......</span><br></pre></td></tr></table></figure>
<p>如果业务代码<strong>直接实例化</strong><code>UserDaoImpl</code><br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        UserService userService = (UserService) app.getBean(&quot;userService&quot;);</span></span><br><span class="line"><span class="comment">//        userService.save();</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">	at com.itheima.service.impl.UserServiceImpl.save(UserServiceImpl.java:15)</span><br><span class="line">	at com.itheima.demo.UserController.main(UserController.java:15)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>
<p>提示空指针异常, 原因是:<br><code>userService</code>不是从spring容器中获取的, 没有执行<code>setUserDao</code></p>
<h4 id="e-set方法注入-–-p命名空间注入"><a href="#e-set方法注入-–-p命名空间注入" class="headerlink" title="e.set方法注入 – p命名空间注入:"></a>e.set方法注入 – p命名空间注入:</h4><p>p命名空间注入本质也是set方法注入, 但比起上述的set方法注入更加方便, 主要体现在配置文件中, 如下:</p>
<ul>
<li>需要引入P命名空间:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要修改注入方式:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用属性的方式: userDao-ref =&gt; 注入对象 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="f-有参构造注入"><a href="#f-有参构造注入" class="headerlink" title="f. 有参构造注入:"></a>f. 有参构造注入:</h4><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    定义有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    (必须)定义无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  构造方法:依赖注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- name: 有参构造参数名; ref: 容器中的id       --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-6-Bean的依赖注入–其他数据类型"><a href="#1-6-Bean的依赖注入–其他数据类型" class="headerlink" title="1.6 Bean的依赖注入–其他数据类型:"></a>1.6 Bean的依赖注入–其他数据类型:</h3>除了对象的引用注入,<strong>普通数据类型, 集合</strong>等都可以在容器中进行注入;<br>注入数据三种数据类型:</li>
<li>引用数据注入: (上一节提到)</li>
<li>普通数据类型:</li>
<li>集合数据类型:</li>
</ul>
<h4 id="a-普通数据类型注入"><a href="#a-普通数据类型注入" class="headerlink" title="a.普通数据类型注入:"></a>a.普通数据类型注入:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;===============&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  普通数据类型注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>业务代码:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">zhangsan===============18</span><br><span class="line">save running......</span><br></pre></td></tr></table></figure>

<h4 id="b-集合类型注入"><a href="#b-集合类型注入" class="headerlink" title="b.集合类型注入:"></a>b.集合类型注入:</h4><p>创建一个类,供后边引用:<br><code>spring/spring_ioc/src/main/java/com/itheima/domain/User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nama;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNama</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nama;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNama</span><span class="params">(String nama)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nama = nama;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;nama=&#x27;&quot;</span> + nama + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集合数据类型注入:<br><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    集合数据类型注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strList = strList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件,配置集合注入:<br><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  集合数据类型注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nama&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nama&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ddddd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ref: 注入容器中的实例 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>ppp1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>ppp2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ppp3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>业务代码:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">[aaaaa, bbbbb, ccccc, ddddd]</span><br><span class="line">&#123;user1=User&#123;nama=&#x27;张三&#x27;, addr=&#x27;北京&#x27;&#125;, user2=User&#123;nama=&#x27;李四&#x27;, addr=&#x27;上海&#x27;&#125;&#125;</span><br><span class="line">&#123;p1=ppp1, p2=ppp2, p3=ppp3&#125;</span><br><span class="line">save running......</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
</search>
