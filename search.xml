<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在github上搭建一个hexo博客</title>
    <url>/2021/01/01/create-Bolg-site/</url>
    <content><![CDATA[<h1 id="一、为何搭建个人博客"><a href="#一、为何搭建个人博客" class="headerlink" title="一、为何搭建个人博客:"></a>一、为何搭建个人博客:</h1><p>&emsp;&emsp;其实我在CSDN有自己的博客, 随着文章越写越多, 我发现CSDN对分类的数量是有限制的, 后期我想写其他分类的文章的时候, 就不能再创建新的分类了. 也有想过再搞一个微信的公众号, 之前上学那会搞过学院的官方微信公众号, 各种认证和各种敏感词汇搞得很烦, 而且对于一些定制化的接入也比较麻烦. 所以, 想来想去, 还是搞一个内容可以完全由自己掌握的博客. 一来可以当做自己的一个学习笔记, 二来可以分享给需要的朋友, 三来可以作为自己其他服务的入口. 说干就干吧;</p>
<h1 id="二、创建githu仓库"><a href="#二、创建githu仓库" class="headerlink" title="二、创建githu仓库:"></a>二、创建githu仓库:</h1><p>&emsp;&emsp;关于Git仓库有国内的<a href="https://gitee.com/">Gitee</a>和国外的<a href="https://github.com/">Github</a>都可以选择;<br>&emsp;&emsp;默认已经在电脑上安装了<a href="https://git-scm.com/">Git</a>的客户端;</p>
<h2 id="1-创建代码仓库"><a href="#1-创建代码仓库" class="headerlink" title="1. 创建代码仓库:"></a>1. 创建代码仓库:</h2><p><img src="/images/create-Bolg-site/createRepository.png"></p>
<h1 id="三、Hexo"><a href="#三、Hexo" class="headerlink" title="三、Hexo:"></a>三、Hexo:</h1><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h1 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章:"></a>四、编写文章:</h1><h1 id="五、Hexo常用"><a href="#五、Hexo常用" class="headerlink" title="五、Hexo常用:"></a>五、Hexo常用:</h1>]]></content>
      <categories>
        <category>服务器</category>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习001之绪论</title>
    <url>/2021/01/10/java_001_Init/</url>
    <content><![CDATA[<h1 id="一、开发前言"><a href="#一、开发前言" class="headerlink" title="一、开发前言:"></a>一、开发前言:</h1><h2 id="1-java语言概述"><a href="#1-java语言概述" class="headerlink" title="1. java语言概述:"></a>1. java语言概述:</h2><h3 id="1-1-什么是java语言"><a href="#1-1-什么是java语言" class="headerlink" title="1.1 什么是java语言:"></a>1.1 什么是java语言:</h3><p>…</p>
<h3 id="1-2-java发展史"><a href="#1-2-java发展史" class="headerlink" title="1.2 java发展史:"></a>1.2 java发展史:</h3><p>…</p>
<h3 id="1-3-java语言能做什么"><a href="#1-3-java语言能做什么" class="headerlink" title="1.3 java语言能做什么:"></a>1.3 java语言能做什么:</h3><p>…</p>
<h2 id="2-计算机基础知识"><a href="#2-计算机基础知识" class="headerlink" title="2. 计算机基础知识:"></a>2. 计算机基础知识:</h2><h3 id="2-1-二进制"><a href="#2-1-二进制" class="headerlink" title="2.1 二进制:"></a>2.1 二进制:</h3><p>二进制转十进制： ”8421法“;<br>十进制转二进制: “辗转相除法”;</p>
<h3 id="2-2-存储单元"><a href="#2-2-存储单元" class="headerlink" title="2.2 存储单元:"></a>2.2 存储单元:</h3><p>1 Byte(字节) = 8bit(位,比特)<br>1 KB = 1024 Byte<br>1 MB = 1024 KB<br>1 GB = 1024 MB<br>1 TB = 1024 GB<br>1 PB = 1024 TB<br>1 EB = 1024 PB<br>1 ZB = 1024 EB<br><strong>注:</strong></p>
<ul>
<li>进制:<br>1024 = 2^10^</li>
<li>一般网络带宽:<br>100Mbps =&gt;100Mbps /8 = 12.5MB/s</li>
</ul>
<h2 id="3-windows的命令提示符"><a href="#3-windows的命令提示符" class="headerlink" title="3.windows的命令提示符:"></a>3.windows的命令提示符:</h2><p>(我不是第一次使用电脑)</p>
<h1 id="二、java开发环境搭建"><a href="#二、java开发环境搭建" class="headerlink" title="二、java开发环境搭建:"></a>二、java开发环境搭建:</h1><h2 id="1-java虚拟机-–-JVM"><a href="#1-java虚拟机-–-JVM" class="headerlink" title="1. java虚拟机 – JVM:"></a>1. java虚拟机 – JVM:</h2><ul>
<li>jvm: java的运行环境;</li>
<li>跨平台: jvm支持了java的跨平台性; 一次编译,到处运行;</li>
</ul>
<h2 id="2-jre-和-jdk"><a href="#2-jre-和-jdk" class="headerlink" title="2. jre 和 jdk:"></a>2. jre 和 jdk:</h2><ul>
<li>jre: java运行时环境, 包含<code>JVM</code>和运行时所需要的<code>核心类库</code>;</li>
<li>jdk: java的开发工具包, 包含<code>jre</code>和开发所需要的工具;</li>
</ul>
<p><img src="/images/javaLearn/001_6_jdk.png"></p>
<h2 id="3-jdk的下载安装"><a href="#3-jdk的下载安装" class="headerlink" title="3.jdk的下载安装:"></a>3.jdk的下载安装:</h2><p>jdk15:<a href="https://www.oracle.com/java/technologies/javase-jdk15-downloads.html">https://www.oracle.com/java/technologies/javase-jdk15-downloads.html</a><br>jdk8:<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a><br>其他版本: <a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
<h2 id="4-配置环境变量"><a href="#4-配置环境变量" class="headerlink" title="4. 配置环境变量;"></a>4. 配置环境变量;</h2><p><img src="/images/javaLearn/001_1_%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p>
<h1 id="三、HelloWorld入门"><a href="#三、HelloWorld入门" class="headerlink" title="三、HelloWorld入门:"></a>三、HelloWorld入门:</h1><h2 id="1-程序开发步骤说明"><a href="#1-程序开发步骤说明" class="headerlink" title="1. 程序开发步骤说明:"></a>1. 程序开发步骤说明:</h2><p>java程序开发三步骤: <strong>编写、编译、运行</strong><br><img src="/images/javaLearn/001_2_step.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * HelloWorld</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译及运行:<br><img src="/images/javaLearn/001_3_runHello.png"><br><strong>每次修改代码后都要重新<code>编译</code></strong></p>
<h2 id="2-java的注释"><a href="#2-java的注释" class="headerlink" title="2. java的注释:"></a>2. java的注释:</h2><p>Java中提供了三种注释方式，分别是：</p>
<ul>
<li>单行注释: <code>//注释内容</code></li>
<li>多行注释: <code>/*注释内容*/</code></li>
<li>文档注释: <code>/**注释内容*/</code></li>
</ul>
<p>其中, 文档注释与多行注释作用基本相同,唯一的区别是文档注释可以使用<code>javadoc.exe</code>命令生成API文档;</p>
<h1 id="四、变量："><a href="#四、变量：" class="headerlink" title="四、变量："></a>四、变量：</h1><h2 id="1-关键字"><a href="#1-关键字" class="headerlink" title="1. 关键字:"></a>1. 关键字:</h2><p>　　关键字是被Java语言赋予特殊含义, 具有专门用途的单词, 比如之前接触的<code>class</code>, <code>public</code>, <code>static</code>, <code>void</code>均为Java已经预设好的; 你可以先把Java关键字理解为“命令”!<br>　　Java中关键字<code>均为小写</code>，下面是Java中所有关键字:</p>
<p><img src="/images/javaLearn/001_4_%E5%85%B3%E9%94%AE%E5%AD%97.png"></p>
<h2 id="2-标识符"><a href="#2-标识符" class="headerlink" title="2. 标识符:"></a>2. 标识符:</h2><p>在Java程序中, 除了关键字以外基本上都是标识符了;<br>标识符就是名称的意思，所有的名称都统称为标识符; Java中经常要定义类、方法、变量, 在定义他们时总要给它们起名字, 这些名字就是标识符; </p>
<p>标识符的规范:</p>
<ul>
<li>组成元素:<ul>
<li>英文字符: <code>a-zA-Z</code>;</li>
<li>数字: <code>0-9</code>;</li>
<li>符号: <code>_与$</code>;</li>
</ul>
</li>
<li>标识符规则:<ul>
<li>数字不能开头;</li>
<li>不可以使用关键字;</li>
<li>严格区分大小写，不限制长度起名时，尽量达到见名知意;</li>
</ul>
</li>
</ul>
<h2 id="3-常量"><a href="#3-常量" class="headerlink" title="3. 常量:"></a>3. 常量:</h2><ul>
<li>字符串常量: 凡是用双引号引起来的部分;</li>
<li>整型常量: 直接写上的数字, 没有小数;</li>
<li>字符常量: 使用单引号引起来的单个字符;<strong>单引号内不能没有数据</strong></li>
<li>布尔常量: 只有两种取值: <code>true</code>, <code>false</code>;</li>
<li>空常量: <code>null</code>: 表示没有任何数据; <strong>null不能打印输出</strong></li>
</ul>
<h2 id="4-数据类型"><a href="#4-数据类型" class="headerlink" title="4. 数据类型:"></a>4. 数据类型:</h2><h3 id="4-1-分类"><a href="#4-1-分类" class="headerlink" title="4.1 分类:"></a>4.1 分类:</h3><ul>
<li>基本数据类型;</li>
<li>引用数据类型:<code>字符串、类、接口、Lambda</code>；<h3 id="4-2-基本数据类型："><a href="#4-2-基本数据类型：" class="headerlink" title="4.2 基本数据类型："></a>4.2 基本数据类型：</h3></li>
</ul>
<p><strong>四类八种</strong><br><img src="/images/javaLearn/001_5_%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png"></p>
<p><strong>注意:</strong></p>
<ul>
<li>字符串不是基本数据类型, 而是引用类型;</li>
<li>浮点型可能只是一个近似值, 并非精确值;</li>
<li>数据范围与字节数不一定相关,例如: <code>float</code>数据范围比<code>long</code>更加广泛, 但是<code>float</code>是4字节, <code>long</code>是8字节;</li>
<li>浮点数当中默认是<code>double</code>; 如果一定要使用<code>float</code>, 需要加后缀<code>F</code>(3.1415F);</li>
<li>整数当中默认是<code>int</code>;如果一定要使用<code>long</code>, 需要加后缀<code>L</code>(123456L);</li>
</ul>
<h2 id="5-变量"><a href="#5-变量" class="headerlink" title="5. 变量:"></a>5. 变量:</h2><h3 id="5-1-定义变量-创建变量"><a href="#5-1-定义变量-创建变量" class="headerlink" title="5.1 定义变量(创建变量):"></a>5.1 定义变量(创建变量):</h3><p>定义变量的语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">数据类型  变量名  =  数据值；</span><br><span class="line"><span class="keyword">int</span>         a    =  <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>其中<code>int</code>是数据类型, 指定了变量只能存储整数, 而且指定了存储范围为<code>-2147483648～2147483648</code>;<br>其中<code>a</code>表示变量名, 变量名是标识符, 这说明只要是合法的标识符都可以用来做变量名;在程序中可以通过变量名来操作变量(内存中的小盒子);<br>其中<code>=100</code>是给变量赋值, 即向<code>a</code>变量中写入100(变量是个小盒子, 现在小盒子中保存的是100);<br><strong>注意</strong>, 给变量赋的值一定要与类型符合, 也就是说<code>int</code>类型只能存储整数, 而且必须是在<code>-2147483648～2147483648</code>范围内的整数;</p>
<h3 id="5-2-变量使用的注意事项"><a href="#5-2-变量使用的注意事项" class="headerlink" title="5.2 变量使用的注意事项"></a>5.2 变量使用的注意事项</h3><p>使用变量时, 要满足变量的使用规则才可以使用:</p>
<ul>
<li>变量定义后可以不赋值, 使用时再赋值;不赋值不能使用;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    x = <span class="number">20</span>; <span class="comment">//为x赋值20</span></span><br><span class="line">    System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>变量使用时有作用域的限制;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">20</span>;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(x);<span class="comment">//读取x变量中的值，再打印</span></span><br><span class="line">    System.out.println(y);<span class="comment">//读取y变量中的值失败，失败原因，找不到y变量，因为超出了y变量作用范围，所以不能使用y变量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>变量不可以重复定义;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">double</span> x = <span class="number">5.5</span>;<span class="comment">//编译失败，变量重复定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-数据类型转换"><a href="#6-数据类型转换" class="headerlink" title="6. 数据类型转换:"></a>6. 数据类型转换:</h2>不同类型的变量是可以在一起运算的, 但要先进行类型转换再运算;<br>转换的过程中, 数据遵循一个原则:</li>
<li>范围小的数据类型值*如byte), 可以直接转换为范围大的数据类型值(如int);</li>
<li>范围大的数据类型值(如int), 不可以直接转换为范围小的数据类型值(如byte);</li>
</ul>
<p>将各种数据类型按照数据范围从小到大依次列出：<br><code>byte -&gt; short -&gt; int -&gt; long -&gt; float -&gt; double</code></p>
<h3 id="6-1-自动类型转换"><a href="#6-1-自动类型转换" class="headerlink" title="6.1 自动类型转换"></a>6.1 自动类型转换</h3><p>表示范围小的数据类型转换成范围大的数据类型, 这种方式称为<em>自动类型转换</em>;</p>
<p>自动类型转换格式:<br><code>范围大的数据类型 变量 = 范围小的数据类型值;</code><br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">1000</span>;</span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = i;</span><br></pre></td></tr></table></figure>
<h3 id="6-2-强制类型转换"><a href="#6-2-强制类型转换" class="headerlink" title="6.2 强制类型转换"></a>6.2 强制类型转换</h3><p>表示范围大的数据类型转换成范围小的数据类型, 这种方式称为<em>强制类型转换</em>;</p>
<p>强制类型转换格式:<br><code>范围小的数据类型  变量 = (范围小的数据类型) 范围大的数据类型值;</code><br>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  i = (<span class="keyword">int</span>)<span class="number">6.718</span>;   <span class="comment">//i的值为6</span></span><br><span class="line"><span class="comment">// 或</span></span><br><span class="line"><span class="keyword">double</span>  d = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">int</span>  i2 = (<span class="keyword">int</span>)d;     <span class="comment">//i2的值为3</span></span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong></p>
<ul>
<li>强制类型转换,可能存在<strong>数据溢出(整型)**或</strong>精度损失(浮点)**的情况;</li>
<li><code>char</code>类型进行数学运算, 那么字符就会按照ASCII翻译成<code>int</code>;<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(`A` + <span class="number">1</span>);    <span class="comment">// 66</span></span><br></pre></td></tr></table></figure></li>
<li><code>byte, short, char</code>在进行数学运算时都会被提升成<code>int</code>;</li>
</ul>
<h2 id="7-ASCII码表"><a href="#7-ASCII码表" class="headerlink" title="7.ASCII码表:"></a>7.ASCII码表:</h2><h3 id="7-1-why"><a href="#7-1-why" class="headerlink" title="7.1 why:"></a>7.1 why:</h3><p>数字和字符的对照关系表(编码表);</p>
<h3 id="7-2-what"><a href="#7-2-what" class="headerlink" title="7.2 what:"></a>7.2 what:</h3><ul>
<li>ASCII码表: 美国信息交换标准代码;</li>
<li>Unicode码: 万国码, 开头0~127部分和ASCII完全一样, 后续部分包含更多字符;</li>
<li>Emoji:表情也是一种对应的码表;</li>
</ul>
<p>常见对应关系:</p>
<ul>
<li>48 =&gt; ‘0’;</li>
<li>65 =&gt; ‘A’;</li>
<li>97 =&gt; ‘a’;</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习002之运算符</title>
    <url>/2021/01/10/java_002_Operation/</url>
    <content><![CDATA[<h1 id="一、算数运算符"><a href="#一、算数运算符" class="headerlink" title="一、算数运算符:"></a>一、算数运算符:</h1><h2 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符:"></a>1. 算数运算符:</h2><p>运算符是用来计算数据的符号; 数据可以是常量, 也可以是变量; 被运算符操作的数我们称为<strong>操作数</strong><br>|运算符|运算规则|范例|结果|<br>|-|-|-|-|<br>|+|正号|+3|3|<br>|+|加|2+3|5|<br>|+|连接字符串|“中”+“国”|“中国”|<br>|-|负号|int a=3;-a|-3|<br>|-|减|3-1|2|<br>|<em>|乘|2</em>3|6|<br>|/|除|5/2|2|<br>|%|取模|5/2|1|<br>|++|自增|int a=1;a++/++a|2|<br>|–|自减|int b=3;a–/–a|2|</p>
<p><strong>注意:</strong></p>
<ul>
<li>加法运算符在连接字符串时要注意, 只有直接与字符串相加才会转成字符串;</li>
<li>除法”/“当两边为整数时, 取整数部分, 舍余数; 当其中一边为浮点型时, 按正常规则相除;</li>
<li>“%”为整除取余符号, 小数取余没有意义; 结果符号与被取余符号相同;</li>
<li>整数做被除数, 0不能做除数,否则报错;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 算术运算符</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OperatorDemo1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 常量使用算数运算符</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		System.out.println(<span class="number">10</span>+<span class="number">20</span>);  <span class="comment">// 30</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		 * 变量使用算数运算符</span></span><br><span class="line"><span class="comment">		 */</span></span><br><span class="line">		<span class="keyword">int</span> x = <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">int</span> y = <span class="number">20</span>;</span><br><span class="line">		<span class="comment">//&quot;+&quot;作为加法运算使用</span></span><br><span class="line">		<span class="keyword">int</span> z = x + y; </span><br><span class="line">		<span class="comment">//&quot;+&quot;作为连接字符串使用</span></span><br><span class="line">		System.out.println(<span class="string">&quot;x=&quot;</span>+x); <span class="comment">// x=10</span></span><br><span class="line">		System.out.println(<span class="string">&quot;y=&quot;</span>+y); <span class="comment">// y=20</span></span><br><span class="line">		System.out.println(<span class="string">&quot;z=&quot;</span>+z); <span class="comment">// z=30</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-自增-自减运算符"><a href="#2-自增-自减运算符" class="headerlink" title="2. 自增/自减运算符:"></a>2. 自增/自减运算符:</h2><h3 id="2-1-基本含义"><a href="#2-1-基本含义" class="headerlink" title="2.1 基本含义"></a>2.1 基本含义</h3><ul>
<li>++: 运算符, 会在原有值的基础上自增1;</li>
<li>–: 运算符, 会在原有值的基础上自减1;</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>;</span><br><span class="line">++a;</span><br><span class="line">--b;</span><br><span class="line">System.out.println(a);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(b);  <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-使用"><a href="#2-2-使用" class="headerlink" title="2.2 使用"></a>2.2 使用</h3><p>方式:</p>
<ul>
<li>单独使用: 不和其他任何操作作混合, 自己独立成为一个步骤;</li>
<li>混合使用: 和其他操作混合;</li>
</ul>
<p>区别:</p>
<ul>
<li>在独立使用的时候, <code>++a</code>和<code>a++</code>没有区别;</li>
<li>在混合使用时:<ul>
<li><code>++a</code>: 先自增再与其他操作运算;</li>
<li><code>a++</code>: 先将原值(或 当前值)与其他操作运算, 变量再自增;</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">b = ++a + <span class="number">10</span>;</span><br><span class="line">System.out.println(a);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(b);  <span class="comment">// 14</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> d;</span><br><span class="line">c = d++ + <span class="number">10</span>;</span><br><span class="line">System.out.println(c);  <span class="comment">// 4</span></span><br><span class="line">System.out.println(d); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>
<h1 id="二、赋值运算符："><a href="#二、赋值运算符：" class="headerlink" title="二、赋值运算符："></a>二、赋值运算符：</h1><h1 id="三、比较运算符："><a href="#三、比较运算符：" class="headerlink" title="三、比较运算符："></a>三、比较运算符：</h1><h1 id="四、逻辑运算符："><a href="#四、逻辑运算符：" class="headerlink" title="四、逻辑运算符："></a>四、逻辑运算符：</h1><h1 id="五、三元运算符："><a href="#五、三元运算符：" class="headerlink" title="五、三元运算符："></a>五、三元运算符：</h1>]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习003之方法</title>
    <url>/2021/01/10/java_003_Function/</url>
    <content><![CDATA[<h1 id="一、方法入门："><a href="#一、方法入门：" class="headerlink" title="一、方法入门："></a>一、方法入门：</h1><h2 id="1-方法的定义："><a href="#1-方法的定义：" class="headerlink" title="1. 方法的定义："></a>1. 方法的定义：</h2><h3 id="1-1-定义格式："><a href="#1-1-定义格式：" class="headerlink" title="1.1 定义格式："></a>1.1 定义格式：</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数列表) &#123;</span><br><span class="line">    功能代码;</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>基础班</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>基础班</tag>
      </tags>
  </entry>
  <entry>
    <title>一、Spring快速入门, 了解配置文件</title>
    <url>/2021/01/13/javaSpring-001/</url>
    <content><![CDATA[<h1 id="一、spring介绍"><a href="#一、spring介绍" class="headerlink" title="一、spring介绍:"></a>一、spring介绍:</h1><h2 id="1-spring是什么"><a href="#1-spring是什么" class="headerlink" title="1. spring是什么:"></a>1. spring是什么:</h2><p>Spring是分层的Java SE/EE应用full-stack轻量级开源框架, 以<code>IoC</code>(反转控制)和<code>AOP</code>(面向切面编程)为内核;<br>提供<strong>展现层SpringMVC</strong>和<strong>持久层Spring JDBC Template</strong>以及<strong>业务层事务管理</strong>等众多的企业级应用技术, 还能整合开源世界众多著名的第三方框架爱和类库;</p>
<h2 id="2-spring发展"><a href="#2-spring发展" class="headerlink" title="2. spring发展;"></a>2. spring发展;</h2><p>…</p>
<h2 id="3-spring优势"><a href="#3-spring优势" class="headerlink" title="3.spring优势:"></a>3.spring优势:</h2><ul>
<li><strong>方便解耦, 简化开发</strong>:通过Spring提供的IoC容器, 可以将对象间的依赖交由Spring进行控制,避免硬编码所造成的的过渡耦合;用户不必再为单例模式类、属性文件解析等底层需求写代码, 而更专注于上层应用;</li>
<li><strong>AOP编程的支持</strong>: 许多不易用传统OOP实现的功能可以通过AOP轻松实现;</li>
<li><strong>声明式事务支持</strong>: 通过配置的方式, 解放事务管理代码;</li>
<li><strong>方便程序测试</strong>:</li>
<li><strong>方便集成各种优秀的框架</strong>:</li>
<li><strong>降低了JavaEE API的使用难度</strong>: spring对javaEE进行了薄封装, 使API使用难度降低;</li>
<li><strong>java源码典范</strong>: spring设计的妙啊;</li>
</ul>
<h2 id="4-spring的体系结构"><a href="#4-spring的体系结构" class="headerlink" title="4. spring的体系结构:"></a>4. spring的体系结构:</h2><p><img src="/images/javaSpringLearn/001_SpringFramework.png"></p>
<h1 id="二、Spring快速入门"><a href="#二、Spring快速入门" class="headerlink" title="二、Spring快速入门:"></a>二、Spring快速入门:</h1><h2 id="1-spring程序开发步骤"><a href="#1-spring程序开发步骤" class="headerlink" title="1. spring程序开发步骤:"></a>1. spring程序开发步骤:</h2><ul>
<li>导入spring的maven坐标;</li>
<li>编写DAO(如: userDaolmpl)接口和实现类;</li>
<li>创建spring核心xml配置文件;</li>
<li>在xml配置文件中配置userDaolmpl;</li>
<li>通过spring的API获取Bean实例;</li>
</ul>
<h2 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示:"></a>2. 代码演示:</h2><ul>
<li>导入spring:<br><code>/spring/spring_ioc/pom.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.zhouchengfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>编写DAO(如: userDaolmpl)接口和实现类:<br><code>spring/spring_ioc/src/main/java/com/itheima/dao/UserDao.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDao.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建spring核心xml配置文件;<br><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- add bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>通过spring的API获取Bean实例:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="三、spring配置文件"><a href="#三、spring配置文件" class="headerlink" title="三、spring配置文件:"></a>三、spring配置文件:</h1><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><h2 id="1-Bean标签"><a href="#1-Bean标签" class="headerlink" title="1. Bean标签:"></a>1. Bean标签:</h2><h3 id="1-1-基本配置"><a href="#1-1-基本配置" class="headerlink" title="1.1 基本配置:"></a>1.1 基本配置:</h3></li>
<li>id: 唯一标识;</li>
<li>class: 全限定名; 必须存在”无参构造函数”;<h3 id="1-2-范围配置"><a href="#1-2-范围配置" class="headerlink" title="1.2 范围配置:"></a>1.2 范围配置:</h3>scope: 指对象的作用范围, 取值如下:<table>
<thead>
<tr>
<th>取值</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td>(默认值)单例的</td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td>多例的</td>
</tr>
<tr>
<td>request</td>
<td>Web项目中, Spring创建一个Bean对象, 将对象存入到request域中</td>
</tr>
<tr>
<td>session</td>
<td>Web项目中, Spring创建一个Bean对象, 将对象存入到session域中</td>
</tr>
<tr>
<td>global session</td>
<td>Web项目中, 应用在Portlet环境, 如果没有Portlet环境, <code>global session</code>相当于session</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="使用junit进行测试scope属性"><a href="#使用junit进行测试scope属性" class="headerlink" title="使用junit进行测试scope属性:"></a>使用<code>junit</code>进行测试<code>scope</code>属性:</h4><h5 id="a-singleton与prototype"><a href="#a-singleton与prototype" class="headerlink" title="a. singleton与prototype:"></a>a. <code>singleton</code>与<code>prototype</code>:</h5><ul>
<li>注册<code>junit</code>:</li>
</ul>
<p><code>pring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>top.zhouchengfei<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>单元测试代码:<br><code>spring/spring_ioc/src/test/java/com/itheima/test/SpringTest.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试scope属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        UserDao userDao2 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        System.out.println(userDao2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="b-实例创建时机不同"><a href="#b-实例创建时机不同" class="headerlink" title="b. 实例创建时机不同:"></a>b. 实例创建时机不同:</h5><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 增加一个无参构造方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试结果:</li>
<li>scope=”singleton”:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1fe20588</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1fe20588</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意:</strong><br>对象的创建是在加载配置文件的时就创建了;</p>
<ul>
<li>scope=”prototype”:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@14d3bc22</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@12d4bf7e</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>注意:</strong><br>对象的创建是在加载配置文件的时没有创建, 而是在<code>getBean</code>的时候创建;</p>
<h5 id="c-结论"><a href="#c-结论" class="headerlink" title="c.结论:"></a>c.结论:</h5><table>
<thead>
<tr>
<th></th>
<th>singleton</th>
<th>prototype</th>
</tr>
</thead>
<tbody><tr>
<td>Bean的实例化个数</td>
<td>1个</td>
<td>多个</td>
</tr>
<tr>
<td>Bean的实例化时机</td>
<td>当Spring核心文件被加载时, 实例化配置的Bean示例</td>
<td>当调用getBean()时实例化Bean</td>
</tr>
<tr>
<td>Bean的生命周期</td>
<td>1. 对象创建: 当应用加载, 创建容器时, 对象就被创建了;<br/>2. 对象运行: 只要容器在, 对象一直活着;<br/>3. 对象销毁: 当应用卸载, 销毁容器时, 对象就被销毁;</td>
<td>1. 对象创建: 当时用对象时, 创建新的对象示例;<br/>对象运行: 只要对象在使用, 就一直活着;<br/>3. 对象销毁: 当对象长时间不使用, 被java GC;</td>
</tr>
</tbody></table>
<h3 id="1-3-生命周期配置"><a href="#1-3-生命周期配置" class="headerlink" title="1.3 生命周期配置:"></a>1.3 生命周期配置:</h3><ul>
<li>init-method: 指定类中的初始化方法;</li>
<li>destroy-method: 指定类中销毁方法名称;</li>
</ul>
<p><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是初始化方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是销毁方法...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sace running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试生命周期</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ClassPathXmlApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">        app.close(); <span class="comment">// 手动关闭容器;</span></span><br><span class="line">        <span class="comment">// ApplicationContext: 没有关闭方法, 但是其子类ClassPathXmlApplicationContext 有关闭方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">这是初始化方法...</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@61dd025</span><br><span class="line">1月 14, 2021 6:41:51 下午 org.springframework.context.support.AbstractApplicationContext doClose</span><br><span class="line">信息: ...</span><br><span class="line">这是销毁方法...</span><br></pre></td></tr></table></figure>
<h3 id="1-4-Bean实例化配置"><a href="#1-4-Bean实例化配置" class="headerlink" title="1.4 Bean实例化配置:"></a>1.4 Bean实例化配置:</h3><ul>
<li><strong>无参构造方法</strong>实例化;</li>
<li><strong>工厂静态方法</strong>实例化;</li>
<li><strong>工厂实例方法</strong>实例化; </li>
</ul>
<h4 id="a-工厂静态方法"><a href="#a-工厂静态方法" class="headerlink" title="a.工厂静态方法:"></a>a.工厂静态方法:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/factory/StaticFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.StaticFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/test/java/com/itheima/test/SpringTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.test;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试静态工厂构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao1 = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        System.out.println(userDao1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">com.itheima.dao.impl.UserDaoImpl@1a04f701</span><br></pre></td></tr></table></figure>
<h4 id="b-工厂实例方法"><a href="#b-工厂实例方法" class="headerlink" title="b.工厂实例方法:"></a>b.工厂实例方法:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/factory/DynamicFactory.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.impl.UserDaoImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFactory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDao <span class="title">getUserDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserDaoImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.dao.impl.UserDaoImpl&quot; init-method=&quot;init&quot; destroy-method=&quot;destroy&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  工厂静态构造    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;userDao&quot; class=&quot;com.itheima.factory.StaticFactory&quot; factory-method=&quot;getUserDao&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  工厂实例构造  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.DynamicFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;factory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-5-Bean的依赖注入–对象"><a href="#1-5-Bean的依赖注入–对象" class="headerlink" title="1.5 Bean的依赖注入–对象:"></a>1.5 Bean的依赖注入–对象:</h3><h4 id="a-一般方式注入"><a href="#a-一般方式注入" class="headerlink" title="a.一般方式注入:"></a>a.一般方式注入:</h4><p>方式: 在业务代码中获取dao<br><code>spring/spring_ioc/src/main/java/com/itheima/service/UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 从容器中获取Dao</span></span><br><span class="line">       ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">       UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">       userDao.save();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  依赖注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务代码:</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">信息: ...</span><br><span class="line">信息: ...</span><br><span class="line">UserDaoImpl创建......</span><br><span class="line">sace running......</span><br></pre></td></tr></table></figure>
<h4 id="b-依赖注入分析"><a href="#b-依赖注入分析" class="headerlink" title="b.依赖注入分析:"></a>b.依赖注入分析:</h4><ul>
<li>依赖注入: 它是spring框架核心IOC的具体实现;</li>
<li>在编写程序时,通过控制反转, 把对象创建交给spring, 但是代码中不可能出现没有依赖的情况;</li>
<li>IOC解耦只是降低了他们的依赖关系, 但不会消除; 例如: 业务层仍会调用持久层的方法;</li>
<li>这种业务层和持久层的依赖关系, 在使用spring之后, 就让spring类维护了;</li>
<li>简单的说, 就是坐等框架把持久层对象传入业务层, 而不用自己来获取;</li>
</ul>
<h4 id="c-依赖注入的方式"><a href="#c-依赖注入的方式" class="headerlink" title="c.依赖注入的方式:"></a>c.依赖注入的方式:</h4><ul>
<li><strong>构造方法</strong>;</li>
<li><strong>set方法</strong>;</li>
</ul>
<h4 id="d-使用set方法注入"><a href="#d-使用set方法注入" class="headerlink" title="d.使用set方法注入:"></a>d.使用set方法注入:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/service/UserService.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public void save() &#123;</span></span><br><span class="line"><span class="comment">//        // 从容器中获取Dao</span></span><br><span class="line"><span class="comment">//        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        UserDao userDao = (UserDao) app.getBean(&quot;userDao&quot;);</span></span><br><span class="line"><span class="comment">//        userDao.save();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  依赖注入: set方法  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对象的引用用`ref`; 把&quot;容器&quot;内部的&quot;userDao&quot;,通过&quot;userService&quot;的&quot;setUserDao&quot;方法注入给&quot;userService&quot;          --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 业务代码:</span></span><br><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">sace running......</span><br></pre></td></tr></table></figure>
<p>如果业务代码<strong>直接实例化</strong><code>UserDaoImpl</code><br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserController.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line"><span class="comment">//        UserService userService = (UserService) app.getBean(&quot;userService&quot;);</span></span><br><span class="line"><span class="comment">//        userService.save();</span></span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Exception in thread &quot;main&quot; java.lang.NullPointerException</span><br><span class="line">	at com.itheima.service.impl.UserServiceImpl.save(UserServiceImpl.java:15)</span><br><span class="line">	at com.itheima.demo.UserController.main(UserController.java:15)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>
<p>提示空指针异常, 原因是:<br><code>userService</code>不是从spring容器中获取的, 没有执行<code>setUserDao</code></p>
<h4 id="e-set方法注入-–-p命名空间注入"><a href="#e-set方法注入-–-p命名空间注入" class="headerlink" title="e.set方法注入 – p命名空间注入:"></a>e.set方法注入 – p命名空间注入:</h4><p>p命名空间注入本质也是set方法注入, 但比起上述的set方法注入更加方便, 主要体现在配置文件中, 如下:</p>
<ul>
<li>需要引入P命名空间:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br></pre></td></tr></table></figure></li>
<li>需要修改注入方式:<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用属性的方式: userDao-ref =&gt; 注入对象 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span> <span class="attr">p:userDao-ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="f-有参构造注入"><a href="#f-有参构造注入" class="headerlink" title="f. 有参构造注入:"></a>f. 有参构造注入:</h4><code>spring/spring_ioc/src/main/java/com/itheima/service/impl/UserServiceImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    定义有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//    (必须)定义无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserServiceImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring/spring_ioc/src/main/resources/applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  构造方法:依赖注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- name: 有参构造参数名; ref: 容器中的id       --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="1-6-Bean的依赖注入–其他数据类型"><a href="#1-6-Bean的依赖注入–其他数据类型" class="headerlink" title="1.6 Bean的依赖注入–其他数据类型:"></a>1.6 Bean的依赖注入–其他数据类型:</h3>除了对象的引用注入,<strong>普通数据类型, 集合</strong>等都可以在容器中进行注入;<br>注入数据三种数据类型:</li>
<li>引用数据注入: (上一节提到)</li>
<li>普通数据类型:</li>
<li>集合数据类型:</li>
</ul>
<h4 id="a-普通数据类型注入"><a href="#a-普通数据类型注入" class="headerlink" title="a.普通数据类型注入:"></a>a.普通数据类型注入:</h4><p><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(username + <span class="string">&quot;===============&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  普通数据类型注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zhangsan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>业务代码:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">zhangsan===============18</span><br><span class="line">save running......</span><br></pre></td></tr></table></figure>

<h4 id="b-集合类型注入"><a href="#b-集合类型注入" class="headerlink" title="b.集合类型注入:"></a>b.集合类型注入:</h4><p>创建一个类,供后边引用:<br><code>spring/spring_ioc/src/main/java/com/itheima/domain/User.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String nama;</span><br><span class="line">    <span class="keyword">private</span> String addr;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNama</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nama;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNama</span><span class="params">(String nama)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nama = nama;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddr</span><span class="params">(String addr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;nama=&#x27;&quot;</span> + nama + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, addr=&#x27;&quot;</span> + addr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>集合数据类型注入:<br><code>spring/spring_ioc/src/main/java/com/itheima/dao/impl/UserDaoImpl.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao.impl;</span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="comment">//    集合数据类型注入</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; strList;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, User&gt; userMap;</span><br><span class="line">    <span class="keyword">private</span> Properties properties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrList</span><span class="params">(List&lt;String&gt; strList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strList = strList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserMap</span><span class="params">(Map&lt;String, User&gt; userMap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userMap = userMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDaoImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl创建......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(strList);</span><br><span class="line">        System.out.println(userMap);</span><br><span class="line">        System.out.println(properties);</span><br><span class="line">        System.out.println(<span class="string">&quot;save running......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件,配置集合注入:<br><code>spring/spring_ioc/src/main/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  集合数据类型注入  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nama&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.domain.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nama&quot;</span> <span class="attr">value</span>=<span class="string">&quot;李四&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;addr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上海&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;strList&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>aaaaa<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>bbbbb<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ccccc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>ddddd<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userMap&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- ref: 注入容器中的实例 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;user2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>ppp1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p2&quot;</span>&gt;</span>ppp2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;p3&quot;</span>&gt;</span>ppp3<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>业务代码:<br><code>spring/spring_ioc/src/main/java/com/itheima/demo/UserDaoDemo.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过spring的API获取Bean实例</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserDao userDao = (UserDao) app.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UserDaoImpl创建......</span><br><span class="line">[aaaaa, bbbbb, ccccc, ddddd]</span><br><span class="line">&#123;user1=User&#123;nama=&#x27;张三&#x27;, addr=&#x27;北京&#x27;&#125;, user2=User&#123;nama=&#x27;李四&#x27;, addr=&#x27;上海&#x27;&#125;&#125;</span><br><span class="line">&#123;p1=ppp1, p2=ppp2, p3=ppp3&#125;</span><br><span class="line">save running......</span><br></pre></td></tr></table></figure>
<h2 id="2-引入其他配置文件-分模块开发"><a href="#2-引入其他配置文件-分模块开发" class="headerlink" title="2. 引入其他配置文件(分模块开发)"></a>2. 引入其他配置文件(分模块开发)</h2><p>在实际开发中, Spring的配置内容非常多, 这就导致Spring配置很繁杂且体积很大, 所以, 可以将配置拆解到其他配置文件中, 而在Spring主配置文件中通过import标签进行加载:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-xxx.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结:"></a>3. 总结:</h2><p>Spring的重点配置:</p>
<ul>
<li><code>&lt;bean&gt;</code>标签:<ul>
<li>id属性: 在容器中Bean示例的唯一标识, 不允许重复;</li>
<li>class属性: 要实例化的Bean的全限定名;</li>
<li>scope属性: Bean的作用范围, 常用是<code>singleton</code>(默认)和<code>prototype</code>;</li>
<li><code>&lt;property&gt;</code>标签: 属性注入:<ul>
<li>name属性: 属性名称;</li>
<li>value属性: 注入普通属性值;</li>
<li>ref属性: 注入的对象引用</li>
<li><code>&lt;list&gt;</code>标签</li>
<li><code>&lt;map&gt;</code>标签</li>
<li><code>&lt;properties&gt;</code>标签</li>
<li>…</li>
</ul>
</li>
<li><code>&lt;constructor-arg&gt;</code> 标签</li>
</ul>
</li>
<li><code>&lt;import&gt;</code>标签: 导入其他Spring配置分文件</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>二、Spring相关配置, 数据源及注解开发</title>
    <url>/2021/01/31/javaSpring-002/</url>
    <content><![CDATA[<h1 id="一、Spring相关API"><a href="#一、Spring相关API" class="headerlink" title="一、Spring相关API:"></a>一、Spring相关API:</h1><h2 id="1-ApplicationContext的继承体系"><a href="#1-ApplicationContext的继承体系" class="headerlink" title="1. ApplicationContext的继承体系:"></a>1. ApplicationContext的继承体系:</h2><p><code>applicationContext</code>: 接口类型, 代表应用上下文, 可以通过其实例获得Spring容器中的Bean对象<br><img src="/images/javaSpringLearn/002_applicationContext.png"></p>
<h2 id="2-ApplicationContext的实现类"><a href="#2-ApplicationContext的实现类" class="headerlink" title="2. ApplicationContext的实现类:"></a>2. ApplicationContext的实现类:</h2><h3 id="2-1-ClassPathXMLApplicationContext"><a href="#2-1-ClassPathXMLApplicationContext" class="headerlink" title="2.1 ClassPathXMLApplicationContext:"></a>2.1 ClassPathXMLApplicationContext:</h3><p>它是从类的根路径下加载配置文件推荐使用这种</p>
<h3 id="2-2-FileSystemXMLApplicationContext"><a href="#2-2-FileSystemXMLApplicationContext" class="headerlink" title="2.2 FileSystemXMLApplicationContext:"></a>2.2 FileSystemXMLApplicationContext:</h3><p>它是从磁盘路径上加载配置文件, 配置可以在磁盘的任意位置;</p>
<h3 id="2-3-AnnotationConfigApplicationContext"><a href="#2-3-AnnotationConfigApplicationContext" class="headerlink" title="2.3 AnnotationConfigApplicationContext:"></a>2.3 AnnotationConfigApplicationContext:</h3><p>当时用注解配置容器对象时, 需要使用此类来常见spring容器; 它用来读取注解;</p>
<h2 id="3-getBean-方法使用"><a href="#3-getBean-方法使用" class="headerlink" title="3. getBean()方法使用:"></a>3. getBean()方法使用:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getBean</span><span class="params">(String name)</span> throw BeansException </span>&#123;</span><br><span class="line">    <span class="comment">// 容器中定义的id</span></span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> Beanxception </span>&#123;</span><br><span class="line">    <span class="comment">// requiredType: 字节码对象类型</span></span><br><span class="line">    assertBeanFactoryActive();</span><br><span class="line">    <span class="keyword">return</span> getBeanFactory().getBean(requiredType);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="二、Spring配置数据源"><a href="#二、Spring配置数据源" class="headerlink" title="二、Spring配置数据源:"></a>二、Spring配置数据源:</h1><h2 id="1-数据源-连接池-的作用"><a href="#1-数据源-连接池-的作用" class="headerlink" title="1. 数据源(连接池)的作用:"></a>1. 数据源(连接池)的作用:</h2><ul>
<li>数据源是提高程序性能出现的;</li>
<li>事先实例化数据源, 初始化部分连接资源;</li>
<li>使用连接资源时从数据源中获取;</li>
<li>使用完毕后将连接资源归还给数据源;</li>
</ul>
<p>常见的数据源(连接池):<strong>DBCP, C3P0, BoneCP, Druid等</strong></p>
<h2 id="2-数据源手动创建"><a href="#2-数据源手动创建" class="headerlink" title="2.数据源手动创建:"></a>2.数据源手动创建:</h2><ul>
<li><p>创建一个新的maven项目:<code>spring_ioc_anno</code></p>
</li>
<li><p>配置文件导入配置坐标:<br><code>spring_ioc_anno/pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc_anno<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>14<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.32<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建一般测试代码:<br><code>spring_ioc_anno/src/test/java/datasource/test/DataSourceTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 测试手动创建c3p0数据源</span></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setJdbcUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUser(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root123&quot;</span>);</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用数据库</span></span><br><span class="line">        System.out.println(conn); <span class="comment">// com.mchange.v2.c3p0.impl.NewProxyConnection@2928854b</span></span><br><span class="line">        <span class="comment">// 释方连接</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 测试手动创建druid数据源</span></span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;root123&quot;</span>);</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        <span class="comment">// 使用数据库</span></span><br><span class="line">        System.out.println(conn); <span class="comment">// com.mysql.jdbc.JDBC4Connection@7334aada</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 释方连接</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不管是使用<code>c3p0</code>还是<code>druid</code>作为数据源, 数据源的配置与源码是耦合的; 因此将配置参数抽取到配置文件中;</p>
</li>
<li><p>创建配置文件:<br><code>spring_ioc_anno/src/test/resources/jdbc.properties</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jdbc.driver&#x3D;com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;test</span><br><span class="line">jdbc.username&#x3D;root</span><br><span class="line">jdbc.password&#x3D;root123</span><br></pre></td></tr></table></figure></li>
<li><p>修改测试代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试手动创建c3p0数据源(加载properties配置文件)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        <span class="comment">// 读取配置文件</span></span><br><span class="line">        ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        dataSource.setDriverClass(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">        dataSource.setJdbcUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>));</span><br><span class="line">        dataSource.setUser(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        <span class="comment">// 使用数据库</span></span><br><span class="line">        System.out.println(conn); <span class="comment">// com.mchange.v2.c3p0.impl.NewProxyConnection@5e0826e7</span></span><br><span class="line">        <span class="comment">// 释方连接</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试手动创建druid数据源(加载properties配置文件)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DruidDataSource dataSource = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">        ResourceBundle rb = ResourceBundle.getBundle(<span class="string">&quot;jdbc&quot;</span>);</span><br><span class="line">        dataSource.setDriverClassName(rb.getString(<span class="string">&quot;jdbc.driver&quot;</span>));</span><br><span class="line">        dataSource.setUrl(rb.getString(<span class="string">&quot;jdbc.url&quot;</span>));</span><br><span class="line">        dataSource.setUsername(rb.getString(<span class="string">&quot;jdbc.username&quot;</span>));</span><br><span class="line">        dataSource.setPassword(rb.getString(<span class="string">&quot;jdbc.password&quot;</span>));</span><br><span class="line"></span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        <span class="comment">// 使用数据库</span></span><br><span class="line">        System.out.println(conn); <span class="comment">// com.mysql.jdbc.JDBC4Connection@6e20b53a</span></span><br><span class="line">        <span class="comment">// 释方连接</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="3-spring配置数据源"><a href="#3-spring配置数据源" class="headerlink" title="3. spring配置数据源:"></a>3. spring配置数据源:</h2><p>可以将DataSource的创建权交由Sprint容器去完成;</p>
</li>
<li><p>导入spring坐标:<br><code>spring_ioc_anno/pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span> ...<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="comment">&lt;!-- 导入spring坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置applicationContext.xml:<br><code>spring_ioc_anno/src/test/resources/applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root123&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试代码:<br><code>spring_ioc_anno/src/test/java/datasource/test/DataSourceTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">// 测试spring容器产生数据源对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        DataSource dataSource = (DataSource) app.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        Connection conn = dataSource.getConnection();</span><br><span class="line">        System.out.println(conn);   <span class="comment">// com.mchange.v2.c3p0.impl.NewProxyConnection@75c56eb9</span></span><br><span class="line">        conn.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-抽取jdbc配置文件"><a href="#4-抽取jdbc配置文件" class="headerlink" title="4. 抽取jdbc配置文件:"></a>4. 抽取jdbc配置文件:</h2><p><code>applicationContext.xml</code>加载<code>jdbc.properties</code>配置文件获得连接信息;</p>
</li>
<li><p>需要引入context命名空间和约束路径:</p>
<ul>
<li>命名空间: <code>xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</code></li>
<li>约束路径: `xsi:schemaLocation=”<pre><code>      http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</code></pre>
<code> </code>spring_ioc_anno/src/test/resources/applicationContext.xml`<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 加载外部的properties文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、spring注解开发"><a href="#三、spring注解开发" class="headerlink" title="三、spring注解开发:"></a>三、spring注解开发:</h1><h2 id="1-spring原始注解"><a href="#1-spring原始注解" class="headerlink" title="1. spring原始注解:"></a>1. spring原始注解:</h2>spring是轻代码重配置的框架, 配置比较繁重, 影响开发效率, 所以注解开发是一种趋势, 注解代替xml配置文件可以简化配置, 提高开发效率;<br>spring原始注解主要代替&lt;bean&gt;的配置:<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Component</td>
<td>使用在类上用于实例化Bean</td>
</tr>
<tr>
<td>@Controller</td>
<td>使用在web层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Service</td>
<td>使用在Service层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Repository</td>
<td>使用在dao层类上用于实例化Bean</td>
</tr>
<tr>
<td>@Autowired</td>
<td>使用在字段上用于根据类型依赖注入</td>
</tr>
<tr>
<td>@Qualifier</td>
<td>结合@Autowired一起使用用于根据名称进行依赖注入</td>
</tr>
<tr>
<td>@Resource</td>
<td>相当于@Autowired+@Qualifier, 按照名称进行注入</td>
</tr>
<tr>
<td>@Value</td>
<td>注入普通属性</td>
</tr>
<tr>
<td>@Scope</td>
<td>标注Bean的作用范围</td>
</tr>
<tr>
<td>@PostConstruct</td>
<td>使用在方法上标注该方法是Bean的初始化方法</td>
</tr>
<tr>
<td>@PreDestroy</td>
<td>使用在方法上标注该方法是Bean的销毁方法</td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ul>
<p><strong>注意:</strong><br>使用注解进行开发时,需要在applicationContext.xml中配置组件扫描, 作用是 指定哪个包及其子包下的Bean需要进行扫描以便识别使用注解配置的类,字段和方法</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  注解的组件扫描  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;datasource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="2-搭建初始测试环境"><a href="#2-搭建初始测试环境" class="headerlink" title="2. 搭建初始测试环境:"></a>2. 搭建初始测试环境:</h2><ul>
<li>构建dao层:<br><code>spring_ioc_anno/src/test/java/datasource/dao/UserDao.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring_ioc_anno/src/test/java/datasource/dao/impl/UserDaoImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构建Service层:<br><code>spring_ioc_anno/src/test/java/datasource/service/UserService.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring_ioc_anno/src/test/java/datasource/service/impl/UserServiceImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> datasource.service.UserService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构建web层:<br><code>spring_ioc_anno/src/test/java/datasource/web/UserController.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>使用xml文件配置<br><code>spring_ioc_anno/src/test/resources/applicationContext.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;datasource.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;datasource.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-使用注解配置Bean"><a href="#3-使用注解配置Bean" class="headerlink" title="3. 使用注解配置Bean:"></a>3. 使用注解配置Bean:</h2><code>spring_ioc_anno/src/test/java/datasource/dao/impl/UserDaoImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;bean id=&quot;userDao&quot; class=&quot;datasource.dao.impl.UserDaoImpl&quot;&gt;&lt;/bean&gt;</span></span><br><span class="line"><span class="comment">//@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring_ioc_anno/src/test/java/datasource/service/impl/UserServiceImpl.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.dao.UserDao;</span><br><span class="line"><span class="keyword">import</span> datasource.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ImportResource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;bean id=&quot;userService&quot; class=&quot;datasource.service.impl.UserServiceImpl&quot;&gt;</span></span><br><span class="line"><span class="comment">//@Component(&quot;userService&quot;)</span></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"><span class="comment">//    &lt;property name=&quot;userDao&quot; ref=&quot;userDao&quot;&gt;&lt;/property&gt;    // 注入</span></span><br><span class="line">    <span class="meta">@Autowired</span>  <span class="comment">// 按照数据类型产品能够spring容器中进行匹配</span></span><br><span class="line"><span class="comment">//    @Qualifier(&quot;userDao&quot;)   // 按照名称注入: 可按照id名称从容器中进行匹配, 但是此处 @Qualifier需要结合 @Autowired 使用</span></span><br><span class="line"><span class="comment">//    @Resource(name=&quot;userDao&quot;)     // 相当于@Autowired+@Qualifier, 按照名称进行注入</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">// 如果使用xml的方式注入, set方法不能省略; 如果使用注解的方式, 则可以省略</span></span><br><span class="line"><span class="comment">//    public void setUserDao(UserDao userDao) &#123;</span></span><br><span class="line"><span class="comment">//        this.userDao = userDao;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>    <span class="comment">// 使用@Value进行参数注入</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(driver); <span class="comment">// com.mysql.jdbc.Driver</span></span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service对象的初始化方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Service对象的销毁方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
删除<code>applicationContext.xml</code>中关于以上Bean的配置, 并添加组件扫描;</li>
</ul>
<h2 id="4-Spring的新注解"><a href="#4-Spring的新注解" class="headerlink" title="4.Spring的新注解:"></a>4.Spring的新注解:</h2><p>使用上边的注解不能全部代替xml配置文件, 还需要使用注解替代的配置如下:</p>
<ul>
<li>非自定义的Bean的配置: &lt;bean&gt;</li>
<li>加载properties文件的配置: &lt;context:property-placeholder&gt;</li>
<li>组件扫描的配置: &lt;context:component&gt;</li>
<li>引入其他文件: &lt;import&gt;</li>
</ul>
<p>新注解:</p>
<table>
<thead>
<tr>
<th>注解</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>@Configuration</td>
<td>用于指定当前类是一个spring配置类, 当创建容器时会从类上加载注解</td>
</tr>
<tr>
<td>@ComponentScan</td>
<td>用于指定Spring在初始化容器时要扫描的包;</td>
</tr>
<tr>
<td>@Bean</td>
<td>使用在方法上, 标注将该方法的返回值存储到spring容器中</td>
</tr>
<tr>
<td>@PropertySource</td>
<td>用于加载.peoperties文件中的配置</td>
</tr>
<tr>
<td>@Import</td>
<td>用于导入其他配置类</td>
</tr>
</tbody></table>
<h2 id="5-使用新注解"><a href="#5-使用新注解" class="headerlink" title="5. 使用新注解:"></a>5. 使用新注解:</h2><ul>
<li>创建config包,用于存放配置类:<br><code>spring_ioc_anno/src/test/java/datasource/config/DataSourceConfiguration.java</code><br>用于配置数据源<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;context:property-placeholder location=&quot;classpath:jdbc.properties&quot;&gt;&lt;/context:property-placeholder&gt;: 加载外部的properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc.driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;jdbc.url&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;jdbc.username&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc.password&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;dataSource&quot;)</span> <span class="comment">// Spring会将当前方法的返回值以指定名称存储到spring容器中</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">getDataSource</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 测试手动创建c3p0数据源</span></span><br><span class="line">        ComboPooledDataSource dataSource = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">        dataSource.setDriverClass(driver);</span><br><span class="line">        dataSource.setJdbcUrl(url);</span><br><span class="line">        dataSource.setUser(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<code>spring_ioc_anno/src/test/java/datasource/config/SpringConfiguration.java</code><br>spring的主配置类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.beans.PropertyVetoException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 标志该类是Spring的核心配置</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//&lt;context:component-scan base-package=&quot;datasource&quot;&gt;&lt;/context:component-scan&gt; : 组件扫描</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;datasource&quot;)</span></span><br><span class="line"><span class="comment">// &lt;import resource=&quot;/&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Import(&#123;DataSourceConfiguration.class&#125;)</span>    <span class="comment">// 这是一个数组, 可以添加多个</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringConfiguration</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure></li>
<li>修改getBean时, 配置的加载方法:<br><code>spring_ioc_anno/src/test/java/datasource/web/UserController.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.web;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.config.SpringConfiguration;</span><br><span class="line"><span class="keyword">import</span> datasource.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.AnnotationConfigApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        ApplicationContext app = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);</span></span><br><span class="line">        ApplicationContext app = <span class="keyword">new</span> AnnotationConfigApplicationContext(SpringConfiguration.class);</span><br><span class="line">        UserService userService = (UserService) app.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="四、Spring整合Junit"><a href="#四、Spring整合Junit" class="headerlink" title="四、Spring整合Junit:"></a>四、Spring整合Junit:</h1><h2 id="1-原始Junit测试Spring的问题"><a href="#1-原始Junit测试Spring的问题" class="headerlink" title="1. 原始Junit测试Spring的问题:"></a>1. 原始Junit测试Spring的问题:</h2>在测试类中, 每个测试方法都有以下两行代码:<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ApplicationContext app = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;base.xml&quot;</span>);</span><br><span class="line">IAccountService as = app.getBean(<span class="string">&quot;accountService&quot;</span>, IAccountService.class);</span><br></pre></td></tr></table></figure>
这两行代码的作用是获取容器, 如果不写, 直接会提示空指针异常; 所以不会轻易删掉;</li>
</ul>
<h2 id="2-上述问题解决思路"><a href="#2-上述问题解决思路" class="headerlink" title="2. 上述问题解决思路:"></a>2. 上述问题解决思路:</h2><ul>
<li>让springJunit负责创建Spring容器, 但是需要将配置文件的名称告诉容器;</li>
<li>将需要进行测试的Bean直接在测试类中进行注入;</li>
</ul>
<h2 id="3-Spring继承Junit步骤"><a href="#3-Spring继承Junit步骤" class="headerlink" title="3. Spring继承Junit步骤:"></a>3. Spring继承Junit步骤:</h2><ul>
<li>导入spring继承Junit的坐标;</li>
<li>使用@Runwith注解替换原来的运行期;</li>
<li>使用@ContextConfiguration指定配置文件或配置类;</li>
<li>使用@Autowired注入需要测试的对象;</li>
<li>创建测试方法进行测试;</li>
</ul>
<p><code>spring_ioc_anno/pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 导入spring坐标--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>spring_ioc_anno/src/test/java/datasource/test/SprintJunitTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> datasource.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datasource.config.SpringConfiguration;</span><br><span class="line"><span class="keyword">import</span> datasource.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SprintJunitTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userService.save();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(dataSource.getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>三、Spring AOP开发</title>
    <url>/2021/02/21/javaSpring-003/</url>
    <content><![CDATA[<h1 id="一、Spring的AOP简介"><a href="#一、Spring的AOP简介" class="headerlink" title="一、Spring的AOP简介:"></a>一、Spring的AOP简介:</h1><h2 id="1-什么是AOP"><a href="#1-什么是AOP" class="headerlink" title="1. 什么是AOP:"></a>1. 什么是AOP:</h2><p>AOP为Aspect Oriented Programming的缩写, 意为<strong>面向切面编程</strong>, 是用过过预编译方式和运行期动态代理实现程序功能统一维护的一种技术;<br>AOP是OOP的延续, 是如那件开发中的一个热点, 也是spring框架中的一个重要部分, 是函数式编程的一种衍生范型. 利用AOP可以对业务逻辑的各个部分进行隔离, 从而使得业务逻辑各个部分之间的耦合度降低, 提高程序的可重用性, 同时提高了开发的效率;</p>
<h2 id="2-AOP的作用及其优势"><a href="#2-AOP的作用及其优势" class="headerlink" title="2. AOP的作用及其优势:"></a>2. AOP的作用及其优势:</h2><ul>
<li>作用: 在程序运行期间, 在不修改源码的情况下对方法进行功能增强;</li>
<li>优势: 减少重复代码, 提高开发效率, 并且便于维护;<h2 id="3-AOP的底层实现"><a href="#3-AOP的底层实现" class="headerlink" title="3.AOP的底层实现:"></a>3.AOP的底层实现:</h2>实际上, AOP的底层实现是通过Spring提供的动态代理技术实现的. 运行期间, Spring通过动态代理技术动态的生成代理对象, 代理对象方法执行时进行增强功能的接入, 再去调用目标对象的方法, 从而完成功能的增强;<h2 id="4-AOP的动态代理技术"><a href="#4-AOP的动态代理技术" class="headerlink" title="4. AOP的动态代理技术:"></a>4. AOP的动态代理技术:</h2>常用的动态代理技术:</li>
<li>JDK代理: 基于接口的动态代理技术;</li>
<li>cglib代理: 基于父类的动态代理技术;</li>
</ul>
<p><img src="/images/javaSpringLearn/AopDongTai.png"></p>
<h2 id="5-基于JDK的动态代理"><a href="#5-基于JDK的动态代理" class="headerlink" title="5. 基于JDK的动态代理:"></a>5. 基于JDK的动态代理:</h2><ul>
<li>新建一个java项目; <code>spring_aop/</code></li>
<li>创建一个目标接口:<br><code>spring_aop/src/main/java/proxy/jdk/TargetInterface.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建目标对象:<br><code>spring_aop/src/main/java/proxy/jdk/Target.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建功能增强对象:<br><code>spring_aop/src/main/java/proxy/jdk/Advice.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建测试代码:<br><code>spring_aop/src/main/java/proxy/jdk/ProxyTest.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="keyword">final</span> Target target = <span class="keyword">new</span> Target();</span><br><span class="line">        <span class="comment">// 增强对象</span></span><br><span class="line">        Advice advice = <span class="keyword">new</span> Advice();</span><br><span class="line">        <span class="comment">// 返回值 就是动态生成的代理对象</span></span><br><span class="line">        TargetInterface proxy = (TargetInterface) Proxy.newProxyInstance(</span><br><span class="line">                target.getClass().getClassLoader(), <span class="comment">// 目标对象类加载器</span></span><br><span class="line">                target.getClass().getInterfaces(),  <span class="comment">// 目标对象相同的接口字节码对象数组</span></span><br><span class="line">                <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">                    <span class="comment">// 调用代理对象的任何方法 实质执行的都是invoke方法</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                        advice.beforeRun(); <span class="comment">// 前置增强</span></span><br><span class="line">                        method.invoke(target, args); <span class="comment">// 执行目标方法</span></span><br><span class="line">                        advice.afterRun(); <span class="comment">// 后置增强</span></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">        <span class="comment">// 调用代理对象方法</span></span><br><span class="line">        proxy.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="6-cglib的动态代理"><a href="#6-cglib的动态代理" class="headerlink" title="6. cglib的动态代理:"></a>6. cglib的动态代理:</h2>cglib已集成到spring-core中<br><code>spring_aop/src/main/java/proxy/cglib/ProxyTest.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> proxy.cglib;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建目标对象</span></span><br><span class="line">        <span class="keyword">final</span> Target target = <span class="keyword">new</span> Target();</span><br><span class="line">        <span class="comment">// 增强对象</span></span><br><span class="line">        Advice advice = <span class="keyword">new</span> Advice();</span><br><span class="line">        <span class="comment">// 返回值 就是动态生成的代理对象 基于cglib</span></span><br><span class="line">        <span class="comment">// 1. 创建增强器</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">// 2. 设置父类;</span></span><br><span class="line">        enhancer.setSuperclass(Target.class);</span><br><span class="line">        <span class="comment">// 3. 设置回调:</span></span><br><span class="line">        enhancer.steCallback(<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                advice.beforeRun();     <span class="comment">// 执行前置</span></span><br><span class="line">                Object invoke = method.invoke(target, args);    <span class="comment">// 执行目标</span></span><br><span class="line">                advice.afterRun(); <span class="comment">// 执行后置</span></span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 创建代理对象</span></span><br><span class="line">        Target o = enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 测试</span></span><br><span class="line">        o.save();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-AOP相关概念"><a href="#7-AOP相关概念" class="headerlink" title="7. AOP相关概念:"></a>7. AOP相关概念:</h2>Spring的AOP实现底层就是对上面的动态代理的代码进行了封装, 封装后只需要对需要关注的部分进行代码便携, 并通过配置的方式完成指定目标的方法增强;</li>
</ul>
<p>常用术语:</p>
<ul>
<li>Target(目标对象): 代理的目标对象;</li>
<li>Proxy(代理): 一个类被AOP织入增强后, 就产生一个结果代理类;</li>
<li>Joinpoint(连接点): 是指那些被拦截到的点; 在spring中, 这些点指的是方法, 因为spring只支持方法类型的连接点 — 可以被增强的方法叫做连接点;</li>
<li>Pointcut(切入点): 指要对那些joinpoint进行拦截的定义;</li>
<li>Advice(通知/增强): 指拦截到Joinpoint之后所要做的事情就是通知;</li>
<li>Aspect(切面): 切点+通知的结合;</li>
<li>Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程. Spring采用动态代理织入, 而AspectJ采用编译期织入和类装载期织入;</li>
</ul>
<h2 id="8-AOP开发明确事项"><a href="#8-AOP开发明确事项" class="headerlink" title="8.AOP开发明确事项:"></a>8.AOP开发明确事项:</h2><h3 id="8-1-需要编写的内容"><a href="#8-1-需要编写的内容" class="headerlink" title="8.1 需要编写的内容:"></a>8.1 需要编写的内容:</h3><ul>
<li>编写业务核心代码 (目标类的目标方法);</li>
<li>编写切面类, 切面类中有通知(增强功能方法);</li>
<li>在配置文件中, 配置织入关系, 即将哪些通知与哪些连接点进行结合;<h3 id="8-2-AOP技术实现的内容"><a href="#8-2-AOP技术实现的内容" class="headerlink" title="8.2 AOP技术实现的内容:"></a>8.2 AOP技术实现的内容:</h3>Spring框架监控切入点方法的执行. 一旦监控到切入点方法被运行, 使用代理机制, 动态创建目标对象的代理对象, 根据通知类型, 在代理对象的对应位置, 将通知对应的功能织入, 完成完整代码逻辑运行;</li>
</ul>
<h3 id="8-3-AOP底层使用哪种代理方式"><a href="#8-3-AOP底层使用哪种代理方式" class="headerlink" title="8.3 AOP底层使用哪种代理方式:"></a>8.3 AOP底层使用哪种代理方式:</h3><p>在spring中, 框架会根据目标类是否实现了接口来决定采用哪种动态代理方式;</p>
<h1 id="二、基于XML的AOP开发"><a href="#二、基于XML的AOP开发" class="headerlink" title="二、基于XML的AOP开发:"></a>二、基于XML的AOP开发:</h1><h2 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1. 快速入门:"></a>1. 快速入门:</h2><ul>
<li>导入AOP相关坐标;</li>
<li>创建目标接口和目标类(内部有切点);</li>
<li>创建切面类(内部有增强方法);</li>
<li>将目标类和切面类的对象创建权交给spring;</li>
<li>在applicationContext.xml中配置织入关系;</li>
<li>测试代码;</li>
</ul>
<p><code>spring_aop/pom.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  第三方  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>定义目标接口<br><code>spring_aop\src\main\java\aop\TargetInterface.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义目标类<br><code>spring_aop\src\main\java\aop\Target.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;savr running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义增强类:<br><code>spring_aop\src\main\java\aop\MyAspect.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注册bean<br><code>spring_aop\src\main\resources\applicationContext.xml</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--目标对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;target&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aop.Target&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  切面对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;aop.MyAspect&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置织入: 高速spring框架, 那些方法(切点)需要那些增强 =&gt; 需要引入aop的命名空间  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  声明切面  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void aop.Target.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returnin</span> <span class="attr">method</span>=<span class="string">&quot;afterRun&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(public void aop.Target.save())&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returnin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>测试代码:<br><code>spring_aop\src\test\java\aop\AopTest.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-通知类型"><a href="#2-通知类型" class="headerlink" title="2.通知类型:"></a>2.通知类型:</h2><p>通知的配置语法:<br><code>&lt;aop:通知类型 method=&quot;切面类中方法名&quot; pointcut=&quot;切点表达式&quot;&gt;&lt;/aop:before&gt;</code></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td><a href="aop:before">aop:before</a></td>
<td>用于配置前置通知. 指定增强方法在切点方法前执行</td>
</tr>
<tr>
<td>后置通知</td>
<td><a href="aop:after-returning">aop:after-returning</a></td>
<td>用于配置后置通知. 指定增强方法在切点方法之后执行</td>
</tr>
<tr>
<td>环绕通知</td>
<td><a href="aop:around">aop:around</a></td>
<td>用于配置环绕通知. 指定增强反方在切点方法之前和之后都执行</td>
</tr>
<tr>
<td>异常抛出通知</td>
<td><a href="aop:after-throwing">aop:after-throwing</a></td>
<td>用于配置异常抛出通知. 指定增强方法出现异常时执行</td>
</tr>
<tr>
<td>最终通知</td>
<td><a href="aop:after">aop:after</a></td>
<td>用于配置最终通知. 无论增强方法执行是否有异常都会执行</td>
</tr>
</tbody></table>
<p><code>spring_aop\src\main\java\aop\MyAspect.java</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> aop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强...&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterRun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置增强...&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundRun</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123; <span class="comment">// ProceedingJoinPoint: 进程连接点 ==&gt; 切点</span></span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前增强...&quot;</span>);</span><br><span class="line">        <span class="comment">// 切点方法</span></span><br><span class="line">        Object res = pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后增强...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atferThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atferPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>spring_aop\src\main\resources\applicationContext.xml</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;!--  声明切面  --&gt;</span><br><span class="line">    &lt;aop:aspect ref=<span class="string">&quot;myAspect&quot;</span>&gt;</span><br><span class="line">        &lt;aop:before method=&quot;before&quot; pointcut=&quot;execution(public void aop.Target.save())&quot;&gt;&lt;/aop:before&gt;</span><br><span class="line">        &lt;aop:after method=&quot;afterRun&quot; pointcut=&quot;execution(public void aop.Target.save())&quot;&gt;&lt;/aop:after&gt;</span><br><span class="line">        &lt;aop:around method=&quot;aroundRun&quot; pointcut=&quot;execution(* aop.*.*(..))&quot;&gt;&lt;/aop:around&gt;</span><br><span class="line">        &lt;aop:after-throwing method=&quot;atferThrow&quot; pointcut=&quot;execution(* aop.*.*(..))&quot;&gt;&lt;/aop:after-throwing&gt;</span><br><span class="line">        &lt;aop:after method=&quot;atferPower&quot; pointcut=&quot;execution(* aop.*.*(..))&quot;&gt;&lt;/aop:after&gt;</span><br><span class="line">    &lt;/aop:aspect&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置增强...1</span><br><span class="line">环绕前增强...</span><br><span class="line">save running ....</span><br><span class="line">最终增强...</span><br><span class="line">环绕后增强...</span><br><span class="line">后置增强...11</span><br></pre></td></tr></table></figure>
<p>添加异常:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">前置增强...1</span><br><span class="line">环绕前增强...</span><br><span class="line">最终增强...</span><br><span class="line">异常增强...</span><br><span class="line">后置增强...11</span><br></pre></td></tr></table></figure>

<h2 id="3-切点表达式"><a href="#3-切点表达式" class="headerlink" title="3.切点表达式:"></a>3.切点表达式:</h2><p><code>pointcut=</code>: 切点表达式; 用来指定<code>method</code>增强那些方法;<br>表达式语法:<br><code>execution([修饰符]返回值类型 包名.类名.方法名(参数类型列表))</code></p>
<ul>
<li>访问修饰符可以不写;</li>
<li>返回值类型, 包名, 类名, 方法名可以使用*, 表示任意;</li>
<li>包名.类名 =&gt; 当前包下的类; 包名..类名 =&gt; 当前包及其子包下的类;</li>
<li>参数类型列表可以使用.. 表示任意个数, 任意类型的参数列表;</li>
</ul>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">execution(public void com.xxx.aop.Target.method()) &#x3D;&gt; com.xxx.aop包下Target类的返回值为void的公有(public)的method()方法;</span><br><span class="line">execution(void com.xxx.aop.Targe.*(..)) &#x3D;&gt; com.xxx.aop包下Target类的返回值为void的公有(public)的*所有*方法;</span><br><span class="line">execution(* com.xxx.aop.*.*(..)) &#x3D;&gt; (常用)com.xxx.aop包下的所有类的任意返回值的任意修饰符的*所有*方法;</span><br><span class="line">execution(* com.xxx.aop..*.*(..)) &#x3D;&gt; com.xxx.aop包*及其子包*下的所有类的任意返回值的任意修饰符的*所有*方法;</span><br><span class="line">execution(* *..*.*(..)) &#x3D;&gt; 所有</span><br></pre></td></tr></table></figure>
<h3 id="1-3-切点表达式抽取"><a href="#1-3-切点表达式抽取" class="headerlink" title="1.3 切点表达式抽取:"></a>1.3 切点表达式抽取:</h3><p>当多个增强的切点表达式相同时, 可以将切点表达式进行抽取, 在增强中使用pointcut-ref属性代替pointcut属性来引用抽取后的切点表达式.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  声明切面  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspect&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 抽取切点表达式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public void aop.Target.save())&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;atferPower&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="三、基于注解的AOP开发"><a href="#三、基于注解的AOP开发" class="headerlink" title="三、基于注解的AOP开发:"></a>三、基于注解的AOP开发:</h1><h2 id="1-快速入门-1"><a href="#1-快速入门-1" class="headerlink" title="1. 快速入门:"></a>1. 快速入门:</h2><p>基于注解的AOP开发步骤:</p>
<ul>
<li>创建目标接口和目标类(内部有切点);</li>
<li>创建切面类(内部有增强方法);</li>
<li>将目标类和切面类的对象创建权交给spring;</li>
<li>在切面类中使用注解配置织入关系;</li>
<li>在配置文件中开启组件扫描和AOP的自动代理;</li>
<li>测试代码;</li>
</ul>
<p>示例:</p>
<ul>
<li>创建目标接口:<br><code>spring_aop/src/main/java/anno/TargetInterface.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建目标类:<br><code>spring_aop/src/main/java/anno/Target.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;target&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Target</span> <span class="keyword">implements</span> <span class="title">TargetInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;save running...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>创建切面类:<br><code>spring_aop/src/main/java/anno/MyAspect.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注当前类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 配置前置增强</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public void anno.Target.save())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        num ++;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强...&quot;</span> + num);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 异常抛出</span></span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;execution(* aop.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atferThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>配置文件开启注解扫描:<br><code>spring_aop/src/main/resources/applicationContext-anno.xml</code><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  开启组件扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;anno&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  aop自动代理  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>测试部分:<br><code>spring_aop/src/test/java/test/AnnoTest.java</code><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> anno.TargetInterface;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:applicationContext-anno.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TargetInterface target1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target1.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-注解通知的类型"><a href="#2-注解通知的类型" class="headerlink" title="2. 注解通知的类型:"></a>2. 注解通知的类型:</h2>通知的配置语法: <code>@通知注解(&quot;切点表达式&quot;)</code><table>
<thead>
<tr>
<th>名称</th>
<th>标签</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>前置通知</td>
<td>@Before</td>
<td>用于配置前置通知. 指定增强方法在切点方法前执行</td>
</tr>
<tr>
<td>后置通知</td>
<td>@AfterReturning</td>
<td>用于配置后置通知. 指定增强方法在切点方法之后执行</td>
</tr>
<tr>
<td>环绕通知</td>
<td>@Around</td>
<td>用于配置环绕通知. 指定增强反方在切点方法之前和之后都执行</td>
</tr>
<tr>
<td>异常抛出通知</td>
<td>@AtferThrowing</td>
<td>用于配置异常抛出通知. 指定增强方法出现异常时执行</td>
</tr>
<tr>
<td>最终通知</td>
<td>@After</td>
<td>用于配置最终通知. 无论增强方法执行是否有异常都会执行</td>
</tr>
</tbody></table>
</li>
</ul>
<h2 id="3-切点表达式抽取"><a href="#3-切点表达式抽取" class="headerlink" title="3. 切点表达式抽取:"></a>3. 切点表达式抽取:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;myAspect&quot;)</span></span><br><span class="line"><span class="meta">@Aspect</span> <span class="comment">// 标注当前类是一个切面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 配置前置增强</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(public void anno.Target.save())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterThrowing(&quot;MyAspect.myPoint()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atferThrow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义切点表达式</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* anno.*.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myPoint</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After(&quot;myPoint()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">atferPower</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终增强...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
        <category>spring</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>leetCode算法之栈</title>
    <url>/2021/02/18/leetCode01/</url>
    <content><![CDATA[<h1 id="1021-删除最外层的括号-易"><a href="#1021-删除最外层的括号-易" class="headerlink" title="1021. 删除最外层的括号(易):"></a>1021. 删除最外层的括号(易):</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题:"></a>问题:</h2><p><a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/">https://leetcode-cn.com/problems/remove-outermost-parentheses/</a></p>
<blockquote>
<p>有效括号字符串为空 (“”)、”(“ + A + “)” 或 A + B，其中 A 和 B 都是有效的括号字符串，+ 代表字符串的连接。例如，””，”()”，”(())()” 和 “(()(()))” 都是有效的括号字符串。<br>如果有效字符串 S 非空，且不存在将其拆分为 S = A+B 的方法，我们称其为原语（primitive），其中 A 和 B 都是非空有效括号字符串。<br>给出一个非空有效字符串 S，考虑将其进行原语化分解，使得：S = P_1 + P_2 + … + P_k，其中 P_i 是有效括号字符串原语。<br>对 S 进行原语化分解，删除分解中每个原语字符串的最外层括号，返回 S 。</p>
</blockquote>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/remove-outermost-parentheses/solution/shuang-zhi-zhen-ji-shu-fa-by-simzhou/">参考</a><br>关键在于如何判断哪些括号是<strong>最外层括号</strong>;</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-双指针法"><a href="#方法一-双指针法" class="headerlink" title="方法一: 双指针法:"></a>方法一: 双指针法:</h3><ul>
<li>设置两个变量用来表示左括号(left)的下表和右括号(right)匹配情况;</li>
<li>遍历传入的字符串S;</li>
<li>当遇到的是左括号(时, right+1, 表示需要多一个)来匹配;</li>
<li>当遇到右括号)时, right-1, 表示有一个)与最近的(进行了匹配;</li>
<li>当right==0时, 说明所有的括号都得到了匹配. 此时记录下left和当前位置, 并将left的位置置为下一个位置;</li>
<li>最后,剔除记录的括号位置<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeOuterParentheses</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        <span class="comment"># 双指针, 寻找原语化的最外层括号下标</span></span><br><span class="line">        primitive_indices = []</span><br><span class="line">        left, right = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(S)):</span><br><span class="line">            <span class="keyword">if</span> S[i] == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">                right += <span class="number">1</span></span><br><span class="line">            <span class="keyword">elif</span> S[i] == <span class="string">&quot;)&quot;</span>:</span><br><span class="line">                right -= <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> right == <span class="number">0</span>:</span><br><span class="line">                primitive_indices.append((left, i))</span><br><span class="line">                left = i + <span class="number">1</span></span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 根据下标, 提取原语</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(S[m+<span class="number">1</span>: n] <span class="keyword">for</span> m, n <span class="keyword">in</span> primitive_indices)</span><br></pre></td></tr></table></figure>
⏲ 时间复杂度：O(n)O(n)<br>💾 空间复杂度：O(n)O(n)，使用了额外数组存放最外层括号下标</li>
</ul>
<h3 id="方法2：单指针计数"><a href="#方法2：单指针计数" class="headerlink" title="方法2：单指针计数:"></a>方法2：单指针计数:</h3><ul>
<li>定义两个变量, 保存结果的res 和 记录右括号匹配情况的right;</li>
<li>遍历字符串S, 获取单个字符c;</li>
<li><code>if c == &#39;(&#39; and right &gt; 0</code>: 说明右括号匹配不完全, 不是最外层括号, 所以, 将c保存到res;</li>
<li><code>if c == &#39;)&#39; and right &gt; 1</code>: 虽然遇到了右括号,但还需一个右括号做匹配, 说明不是最外层的括号, 所以, 将c保存到res;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeOuterParentheses</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        res, right = <span class="string">&quot;&quot;</span>, <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span> <span class="keyword">and</span> right &gt; <span class="number">0</span>:</span><br><span class="line">                res += c</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&#x27;)&#x27;</span> <span class="keyword">and</span> right &gt; <span class="number">1</span>:</span><br><span class="line">                res += c</span><br><span class="line">            </span><br><span class="line">            right += <span class="number">1</span> <span class="keyword">if</span> c == <span class="string">&#x27;(&#x27;</span> <span class="keyword">else</span> -<span class="number">1</span>  <span class="comment"># 三元表达式</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
⏲ 时间复杂度：O(n)O(n)<br>💾 空间复杂度：O(n)O(n)，使用了额外数组存放结果</li>
</ul>
<h3 id="方法3-辅助栈"><a href="#方法3-辅助栈" class="headerlink" title="方法3: 辅助栈:"></a>方法3: 辅助栈:</h3><p>定义一个单调栈，它的单调性在于：栈里面只存在左括号，右括号仅仅是用来消灭左括号的;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeOuterParentheses</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        res, stack = <span class="string">&quot;&quot;</span>, []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> S:</span><br><span class="line">            <span class="comment"># 什么情况下，某个括号要加入结果中呢？非外层括号.</span></span><br><span class="line">            <span class="comment"># 怎么判断是非外层括号? 1. 左括号加入结果前，栈不为空。2. 右括号加入结果并消括号后，栈不为空</span></span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&quot;(&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> stack: res += c</span><br><span class="line">                stack.append(c)</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&quot;)&quot;</span>:</span><br><span class="line">                stack.pop()</span><br><span class="line">                <span class="keyword">if</span> stack: res += c</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>⏲ 时间复杂度：O(n)O(n)<br>💾 空间复杂度：O(n)O(n)，使用了栈</p>
<h1 id="1047-删除字符串中的所有相邻重复项-易"><a href="#1047-删除字符串中的所有相邻重复项-易" class="headerlink" title="1047. 删除字符串中的所有相邻重复项(易):"></a>1047. 删除字符串中的所有相邻重复项(易):</h1><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题:"></a>问题:</h2><p><a href="https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/">https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/</a></p>
<blockquote>
<p>给出由小写字母组成的字符串 S，重复项删除操作会选择两个相邻且相同的字母，并删除它们。<br>在 S 上反复执行重复项删除操作，直到无法继续删除。<br>在完成所有重复项删除操作后返回最终的字符串。答案保证唯一。</p>
</blockquote>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：&quot;abbaca&quot;</span><br><span class="line">输出：&quot;ca&quot;</span><br><span class="line">解释：</span><br><span class="line">例如，在 &quot;abbaca&quot; 中，我们可以删除 &quot;bb&quot; 由于两字母相邻且相同，这是此时唯一可以执行删除操作的重复项。之后我们得到字符串 &quot;aaca&quot;，其中又只有 &quot;aa&quot; 可以执行重复项删除操作，所以最后的字符串为 &quot;ca&quot;。</span><br></pre></td></tr></table></figure>
<h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路:"></a>思路:</h2><p>匹配弹出，不匹配留下;</p>
<h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeDuplicates</span>(<span class="params">self, S: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> S:</span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] == c:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(stack)</span><br></pre></td></tr></table></figure>
<h1 id="682-棒球比赛-易"><a href="#682-棒球比赛-易" class="headerlink" title="682. 棒球比赛(易)"></a>682. 棒球比赛(易)</h1><h2 id="问题-2"><a href="#问题-2" class="headerlink" title="问题:"></a>问题:</h2><p><a href="https://leetcode-cn.com/problems/baseball-game">https://leetcode-cn.com/problems/baseball-game</a></p>
<blockquote>
<p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。<br>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p>
<ol>
<li>整数 x - 表示本回合新获得分数 x</li>
<li>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li>
<li>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>
<li>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li>
</ol>
<p>请你返回记录中所有得分的总和</p>
</blockquote>
<p>示例:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：ops &#x3D; [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]</span><br><span class="line">输出：27</span><br><span class="line">解释：</span><br><span class="line">&quot;5&quot; - 记录加 5 ，记录现在是 [5]</span><br><span class="line">&quot;-2&quot; - 记录加 -2 ，记录现在是 [5, -2]</span><br><span class="line">&quot;4&quot; - 记录加 4 ，记录现在是 [5, -2, 4]</span><br><span class="line">&quot;C&quot; - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]</span><br><span class="line">&quot;D&quot; - 记录加 2 * -2 &#x3D; -4 ，记录现在是 [5, -2, -4]</span><br><span class="line">&quot;9&quot; - 记录加 9 ，记录现在是 [5, -2, -4, 9]</span><br><span class="line">&quot;+&quot; - 记录加 -4 + 9 &#x3D; 5 ，记录现在是 [5, -2, -4, 9, 5]</span><br><span class="line">&quot;+&quot; - 记录加 9 + 5 &#x3D; 14 ，记录现在是 [5, -2, -4, 9, 5, 14]</span><br><span class="line">所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 &#x3D; 27</span><br></pre></td></tr></table></figure>
<h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路:"></a>思路:</h2><p>…</p>
<h2 id="方法-2"><a href="#方法-2" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">calPoints</span>(<span class="params">self, ops: List[<span class="built_in">str</span>]</span>) -&gt; int:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> ops:</span><br><span class="line">            <span class="keyword">if</span> c == <span class="string">&quot;+&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">1</span>:</span><br><span class="line">                    stack.append(stack[-<span class="number">1</span>]+stack[-<span class="number">2</span>])</span><br><span class="line">            <span class="keyword">elif</span> c == <span class="string">&quot;D&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.append(stack[-<span class="number">1</span>]*<span class="number">2</span>)</span><br><span class="line">            <span class="keyword">elif</span> c == <span class="string">&quot;C&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(<span class="built_in">int</span>(c))</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sum</span>(stack)</span><br></pre></td></tr></table></figure>
<h1 id="1598-文件夹操作日志搜集器-易"><a href="#1598-文件夹操作日志搜集器-易" class="headerlink" title="1598. 文件夹操作日志搜集器(易)"></a>1598. 文件夹操作日志搜集器(易)</h1><h2 id="问题-3"><a href="#问题-3" class="headerlink" title="问题:"></a>问题:</h2><p>(<a href="https://leetcode-cn.com/problems/crawler-log-folder)[https://leetcode-cn.com/problems/crawler-log-folder]">https://leetcode-cn.com/problems/crawler-log-folder)[https://leetcode-cn.com/problems/crawler-log-folder]</a></p>
<blockquote>
<p>每当用户执行变更文件夹操作时，LeetCode 文件系统都会保存一条日志记录;<br>下面给出对变更操作的说明:</p>
<ul>
<li>“../“ ：移动到当前文件夹的父文件夹。如果已经在主文件夹下，则 继续停留在当前文件夹;</li>
<li>“./“ ：继续停留在当前文件夹;</li>
<li>“x/“ ：移动到名为 x 的子文件夹中。题目数据 保证总是存在文件夹 x;</li>
</ul>
<p>给你一个字符串列表 logs ，其中 logs[i] 是用户在 ith 步执行的操作;<br>文件系统启动时位于主文件夹，然后执行 logs 中的操作。<br>执行完所有变更文件夹操作后，请你找出 返回主文件夹所需的最小步数.</p>
</blockquote>
<h2 id="思路-3"><a href="#思路-3" class="headerlink" title="思路:"></a>思路:</h2><p>…</p>
<h2 id="方法-3"><a href="#方法-3" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minOperations</span>(<span class="params">self, logs: List[<span class="built_in">str</span>]</span>) -&gt; int:</span></span><br><span class="line">        res = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> logs:</span><br><span class="line">            <span class="keyword">if</span> f == <span class="string">&quot;../&quot;</span>:</span><br><span class="line">                res = <span class="built_in">max</span>(<span class="number">0</span>, res-<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">elif</span> f != <span class="string">&quot;./&quot;</span>:</span><br><span class="line">                res += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二:"></a>方法二:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minOperations</span>(<span class="params">self, logs: List[<span class="built_in">str</span>]</span>) -&gt; int:</span></span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> f <span class="keyword">in</span> logs:</span><br><span class="line">            <span class="keyword">if</span> f == <span class="string">&quot;./&quot;</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            <span class="keyword">elif</span> f == <span class="string">&quot;../&quot;</span>:</span><br><span class="line">                <span class="keyword">if</span> stack:</span><br><span class="line">                    stack.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(f)</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(stack)</span><br></pre></td></tr></table></figure>
<h1 id="496-下一个更大元素I-易"><a href="#496-下一个更大元素I-易" class="headerlink" title="496. 下一个更大元素I(易):"></a>496. 下一个更大元素I(易):</h1><h2 id="问题-4"><a href="#问题-4" class="headerlink" title="问题:"></a>问题:</h2><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/">https://leetcode-cn.com/problems/next-greater-element-i/</a></p>
<blockquote>
<p>给你两个 没有重复元素 的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。<br>请你找出 nums1 中每个元素在 nums2 中的下一个比其大的值。<br>nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出 -1;</p>
</blockquote>
<h2 id="思路-4"><a href="#思路-4" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/next-greater-element-i/solution/dan-diao-zhan-zong-jie-by-wu-xian-sen-2/">参考</a></p>
<h3 id="单调栈总结"><a href="#单调栈总结" class="headerlink" title="单调栈总结:"></a>单调栈总结:</h3><ul>
<li>单调递增: 从 栈底 到 栈顶 递增, 栈顶大;</li>
<li>单调递减: 从 栈底 到 栈顶 递减, 栈顶小;</li>
</ul>
<h3 id="什么时候使用调用栈"><a href="#什么时候使用调用栈" class="headerlink" title="什么时候使用调用栈:"></a>什么时候使用调用栈:</h3><p>现有一维数组, 寻找任意一元素右边(左边)第一个比自己大(小)的元素, 且要求O(n)的时间复杂度;</p>
<h3 id="模板套路"><a href="#模板套路" class="headerlink" title="模板套路:"></a>模板套路:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="comment"># 1) 当前项向右找第一个比自己大的位置 -- 从右向左维护一个单调递减栈</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement_01</span>(<span class="params">nums: <span class="built_in">list</span></span>):</span></span><br><span class="line">    res, stack = [-<span class="number">1</span>] * <span class="built_in">len</span>(nums), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt;= nums[i]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            res[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(nums[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前项向右找第一个比自己大的位置 -- 从左向右维护一个单调递减栈</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement_011</span>(<span class="params">nums: <span class="built_in">list</span></span>):</span></span><br><span class="line">    res, stack = [-<span class="number">1</span>] * <span class="built_in">len</span>(nums), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> nums[stack[-<span class="number">1</span>]] &lt; nums[i]:</span><br><span class="line">            res[stack.pop()] = nums[i]</span><br><span class="line">        stack.append(i)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2) 当前项向右第一个比自己小的位置 -- 从右向左维护一个单调递增栈:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement_02</span>(<span class="params">nums: <span class="built_in">list</span></span>):</span></span><br><span class="line">    res, stack = [-<span class="number">1</span>] * <span class="built_in">len</span>(nums), []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &gt;= nums[i]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            res[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(nums[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3) 当前项向左找第一个比自己大的位置 -- 从左向右维护一个单调递减栈:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement_03</span>(<span class="params">nums: <span class="built_in">list</span></span>):</span></span><br><span class="line">    res, stack = [-<span class="number">1</span>] * <span class="built_in">len</span>(nums), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt;= nums[i]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            res[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(nums[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4) 当前项向左找第一个比自己小的位置 -- 从左向右维护一个单调递增的栈:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement_04</span>(<span class="params">nums: <span class="built_in">list</span></span>):</span></span><br><span class="line">    res, stack = [-<span class="number">1</span>] * <span class="built_in">len</span>(nums), []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums)):</span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &gt;= nums[i]:</span><br><span class="line">            stack.pop()</span><br><span class="line">        <span class="keyword">if</span> stack:</span><br><span class="line">            res[i] = stack[-<span class="number">1</span>]</span><br><span class="line">        stack.append(nums[i])</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    nums = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line">    print(<span class="string">f&quot;目标列表: <span class="subst">&#123;nums&#125;</span>&quot;</span>)</span><br><span class="line">    res1 = nextGreaterElement_01(nums)</span><br><span class="line">    print(<span class="string">f&quot;-&gt;大: <span class="subst">&#123;res1&#125;</span>&quot;</span>) <span class="comment"># -&gt;大: [3, 4, -1, -1]</span></span><br><span class="line"></span><br><span class="line">    res11 = nextGreaterElement_011(nums)</span><br><span class="line">    print(<span class="string">f&quot;-&gt;大: <span class="subst">&#123;res11&#125;</span>&quot;</span>) <span class="comment"># -&gt;大: [3, 4, -1, -1]</span></span><br><span class="line"></span><br><span class="line">    res2 = nextGreaterElement_02(nums)</span><br><span class="line">    print(<span class="string">f&quot;-&gt;小: <span class="subst">&#123;res2&#125;</span>&quot;</span>) <span class="comment"># -&gt;小: [-1, 1, 3, 1]</span></span><br><span class="line"></span><br><span class="line">    res3 = nextGreaterElement_03(nums)</span><br><span class="line">    print(<span class="string">f&quot;&lt;-大: <span class="subst">&#123;res3&#125;</span>&quot;</span>) <span class="comment"># &lt;-大: [-1, -1, -1, 4]</span></span><br><span class="line"></span><br><span class="line">    res4 = nextGreaterElement_04(nums)</span><br><span class="line">    print(<span class="string">f&quot;&lt;-小: <span class="subst">&#123;res4&#125;</span>&quot;</span>) <span class="comment"># &lt;-小: [-1, 1, 3, 1]</span></span><br></pre></td></tr></table></figure>
<h2 id="方法-4"><a href="#方法-4" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-暴力破解"><a href="#方法一-暴力破解" class="headerlink" title="方法一: 暴力破解:"></a>方法一: 暴力破解:</h3><p>找元素右侧比自己大的第一个位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span>(<span class="params">self, nums1: List[<span class="built_in">int</span>], nums2: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        dic = &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums2)):</span><br><span class="line">            j = i + <span class="number">1</span></span><br><span class="line">            <span class="keyword">while</span> j &lt; <span class="built_in">len</span>(nums2) <span class="keyword">and</span> nums2[i] &gt;= nums2[j]:</span><br><span class="line">                j += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> j &lt; <span class="built_in">len</span>(nums2) <span class="keyword">and</span> nums2[i] &lt; nums2[j]:</span><br><span class="line">                dic[nums2[i]] = nums2[j]</span><br><span class="line">        <span class="keyword">return</span> [dic.get(x, -<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> nums1]</span><br></pre></td></tr></table></figure>
<h3 id="方法二-单调栈递增"><a href="#方法二-单调栈递增" class="headerlink" title="方法二: 单调栈递增"></a>方法二: 单调栈递增</h3><blockquote>
<p>当前项向右找第一个比自己大的位置 —— 从右向左维护一个单调递减栈</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span>(<span class="params">self, nums1: List[<span class="built_in">int</span>], nums2: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        dic, stack = &#123;&#125;, []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums2)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt;= nums2[i]:</span><br><span class="line">                stack.pop()</span><br><span class="line">            <span class="keyword">if</span> stack:</span><br><span class="line">                dic[nums2[i]] = stack[-<span class="number">1</span>]</span><br><span class="line">            stack.append(nums2[i])</span><br><span class="line">        <span class="keyword">return</span> [dic.get(x, -<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> nums1]</span><br></pre></td></tr></table></figure>
<h3 id="方法三-单调栈递减"><a href="#方法三-单调栈递减" class="headerlink" title="方法三: 单调栈递减:"></a>方法三: 单调栈递减:</h3><blockquote>
<p>从左到右维护单调递减栈, 找元素右侧区域，第一个比自己大的位置</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span>(<span class="params">self, nums1: List[<span class="built_in">int</span>], nums2: List[<span class="built_in">int</span>]</span>) -&gt; List[int]:</span></span><br><span class="line">        dic, stack = &#123;&#125;, []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nums2)):</span><br><span class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[-<span class="number">1</span>] &lt; nums2[i]:</span><br><span class="line">                dic[stack.pop()] = nums2[i]</span><br><span class="line">            stack.append(nums2[i])</span><br><span class="line">        <span class="keyword">return</span> [dic.get(x, -<span class="number">1</span>) <span class="keyword">for</span> x <span class="keyword">in</span> nums1]</span><br></pre></td></tr></table></figure>
<h1 id="225-用队列实现栈"><a href="#225-用队列实现栈" class="headerlink" title="225. 用队列实现栈"></a>225. 用队列实现栈</h1><h2 id="问题-5"><a href="#问题-5" class="headerlink" title="问题:"></a>问题:</h2><p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/">https://leetcode-cn.com/problems/implement-stack-using-queues/</a></p>
<blockquote>
<p>请你仅使用两个队列实现一个后入先出（LIFO）的栈，并支持普通队列的全部四种操作(push、top、pop 和 empty);<br>实现 MyStack 类：</p>
<ul>
<li>void push(int x) 将元素 x 压入栈顶。</li>
<li>int pop() 移除并返回栈顶元素。</li>
<li>int top() 返回栈顶元素。</li>
<li>boolean empty() 如果栈是空的，返回 true ；否则，返回 false 。</li>
</ul>
<p><strong>注意:</strong></p>
<ul>
<li>你只能使用队列的基本操作 —— 也就是 push to back、peek/pop from f- ront、size 和 is empty 这些操作;</li>
<li>你所使用的语言也许不支持队列; 你可以使用 list(列表) 或者 deque(双端队列)来模拟一个队列, 只要是标准的队列操作即可;</li>
</ul>
</blockquote>
<h2 id="思路-5"><a href="#思路-5" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/implement-stack-using-queues/solution/yong-dui-lie-shi-xian-zhan-by-leetcode-solution/">参考</a></p>
<h2 id="方法-5"><a href="#方法-5" class="headerlink" title="方法:"></a>方法:</h2><h2 id="方法一-1"><a href="#方法一-1" class="headerlink" title="方法一:"></a>方法一:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.Q1, self.Q2 = [], []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.Q2.append(x)</span><br><span class="line">        self.Q2.extend(self.Q1)</span><br><span class="line">        self.Q1, self.Q2 = self.Q2, [], </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.Q1.pop(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.Q1[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> <span class="keyword">if</span> self.Q1 <span class="keyword">else</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>
<h2 id="方法二-1"><a href="#方法二-1" class="headerlink" title="方法二:"></a>方法二:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># 两个对列</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.Q1, self.Q2 = collections.deque(), collections.deque()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Push element x onto stack.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.Q2.append(x)</span><br><span class="line">        <span class="keyword">while</span> self.Q1:</span><br><span class="line">            self.Q2.append(self.Q1.popleft())</span><br><span class="line">        self.Q1, self.Q2 = self.Q2, self.Q1</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes the element on top of the stack and returns that element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.Q1.popleft()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the top element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.Q1[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether the stack is empty.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.Q1</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    myStack = MyStack()</span><br><span class="line">    myStack.push(<span class="number">1</span>)</span><br><span class="line">    myStack.push(<span class="number">2</span>)</span><br><span class="line">    print(myStack.top())</span><br><span class="line">    print(myStack.pop())</span><br><span class="line">    print(myStack.empty())</span><br></pre></td></tr></table></figure>
<h1 id="232-用栈实现队列-易"><a href="#232-用栈实现队列-易" class="headerlink" title="232. 用栈实现队列(易):"></a>232. 用栈实现队列(易):</h1><h2 id="问题-6"><a href="#问题-6" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>请你仅使用两个栈实现先入先出队列。队列应当支持一般队列的支持的所有操作（push、pop、peek、empty）：</p>
<p>实现 MyQueue 类:</p>
<ul>
<li>void push(int x) 将元素 x 推到队列的末尾</li>
<li>int pop() 从队列的开头移除并返回元素</li>
<li>int peek() 返回队列开头的元素</li>
<li>boolean empty() 如果队列为空，返回 true ；否则，返回 false</li>
</ul>
<p>说明：</p>
<ul>
<li>你只能使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</li>
<li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。</li>
</ul>
<p>进阶：</p>
<ul>
<li>你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。</li>
</ul>
</blockquote>
<h2 id="思路-6"><a href="#思路-6" class="headerlink" title="思路:"></a>思路:</h2><p>…<br><a href="https://leetcode-cn.com/problems/implement-queue-using-stacks/solution/yong-zhan-shi-xian-dui-lie-by-leetcode/">参考</a></p>
<h2 id="方法-6"><a href="#方法-6" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-2"><a href="#方法一-2" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.S1, self.S2 = collections.deque(), collections.deque()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Push element x to the back of queue.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.S2.append(x)</span><br><span class="line">        <span class="keyword">while</span> self.S1:</span><br><span class="line">            self.S2.append(self.S1.popleft())</span><br><span class="line">        self.S1, self.S2 = self.S2, self.S1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Removes the element from in front of queue and returns that element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.S1.pop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">peek</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Get the front element.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.S1[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">empty</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns whether the queue is empty.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.S1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MyQueue()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># param_2 = obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.peek()</span></span><br><span class="line"><span class="comment"># param_4 = obj.empty()</span></span><br></pre></td></tr></table></figure>
<h1 id="1441-用栈操作构建数组"><a href="#1441-用栈操作构建数组" class="headerlink" title="1441. 用栈操作构建数组:"></a>1441. 用栈操作构建数组:</h1><h2 id="问题-7"><a href="#问题-7" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给你一个目标数组 target 和一个整数 n。每次迭代，需要从  list = {1,2,3…, n} 中依序读取一个数字。<br>请使用下述操作来构建目标数组 target ：</p>
<ul>
<li>Push：从 list 中读取一个新元素， 并将其推入数组中。</li>
<li>Pop：删除数组中的最后一个元素。</li>
<li>如果目标数组构建完成，就停止读取更多元素。</li>
</ul>
<p>题目数据保证目标数组严格递增，并且只包含 1 到 n 之间的数字。<br>请返回构建目标数组所用的操作序列。<br>题目数据保证答案是唯一的。</p>
</blockquote>
<p>示例 1:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：target &#x3D; [1,3], n &#x3D; 3</span><br><span class="line">输出：[&quot;Push&quot;,&quot;Push&quot;,&quot;Pop&quot;,&quot;Push&quot;]</span><br><span class="line">解释： </span><br><span class="line">读取 1 并自动推入数组 -&gt; [1]</span><br><span class="line">读取 2 并自动推入数组，然后删除它 -&gt; [1]</span><br><span class="line">读取 3 并自动推入数组 -&gt; [1,3]</span><br></pre></td></tr></table></figure>
<h2 id="思路-7"><a href="#思路-7" class="headerlink" title="思路:"></a>思路:</h2><p>…</p>
<h2 id="方法-7"><a href="#方法-7" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-3"><a href="#方法一-3" class="headerlink" title="方法一:"></a>方法一:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildArray</span>(<span class="params">self, target: List[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; List[str]:</span></span><br><span class="line">        res = []</span><br><span class="line">        curr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> target:</span><br><span class="line">            <span class="keyword">if</span> i - curr == <span class="number">1</span>:</span><br><span class="line">                res.append(<span class="string">&quot;Push&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.extend([<span class="string">&#x27;Push&#x27;</span>, <span class="string">&#x27;Pop&#x27;</span>] * (i - curr - <span class="number">1</span>))</span><br><span class="line">                res.append(<span class="string">&#x27;Push&#x27;</span>)</span><br><span class="line">            curr = i</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="方法二-2"><a href="#方法二-2" class="headerlink" title="方法二:"></a>方法二:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buildArray</span>(<span class="params">self, target: List[<span class="built_in">int</span>], n: <span class="built_in">int</span></span>) -&gt; List[str]:</span></span><br><span class="line">        res = []</span><br><span class="line">        curr = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n+<span class="number">1</span>):</span><br><span class="line">            <span class="keyword">if</span> curr &gt;= <span class="built_in">len</span>(target):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> i == target[curr]:</span><br><span class="line">                res.append(<span class="string">&quot;Push&quot;</span>)</span><br><span class="line">                curr +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.extend([<span class="string">&#x27;Push&#x27;</span>, <span class="string">&#x27;Pop&#x27;</span>])</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h1 id="155-最小栈"><a href="#155-最小栈" class="headerlink" title="155. 最小栈:"></a>155. 最小栈:</h1><h2 id="问题-8"><a href="#问题-8" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>设计一个支持 push ，pop ，top 操作，并能在常数时间内检索到最小元素的栈。</p>
<ul>
<li>push(x) —— 将元素 x 推入栈中。</li>
<li>pop() —— 删除栈顶的元素。</li>
<li>top() —— 获取栈顶元素。</li>
<li>getMin() —— 检索栈中的最小元素。</li>
</ul>
</blockquote>
<h2 id="思路-8"><a href="#思路-8" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/min-stack/solution/zui-xiao-zhan-by-leetcode-solution/">参考</a></p>
<h2 id="方法-8"><a href="#方法-8" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        initialize your data structure here.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.stack,self.minNum = collections.deque(), collections.deque([math.inf])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">push</span>(<span class="params">self, x: <span class="built_in">int</span></span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.minNum.append(<span class="built_in">min</span>(x, self.minNum[-<span class="number">1</span>]))</span><br><span class="line">        self.stack.append(x)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span>(<span class="params">self</span>) -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">        self.minNum.pop()</span><br><span class="line">        self.stack.pop()</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">top</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.stack[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMin</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.minNum[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Your MinStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = MinStack()</span></span><br><span class="line"><span class="comment"># obj.push(x)</span></span><br><span class="line"><span class="comment"># obj.pop()</span></span><br><span class="line"><span class="comment"># param_3 = obj.top()</span></span><br><span class="line"><span class="comment"># param_4 = obj.getMin()</span></span><br></pre></td></tr></table></figure>
<h1 id="844-比较含退格的字符串"><a href="#844-比较含退格的字符串" class="headerlink" title="844. 比较含退格的字符串:"></a>844. 比较含退格的字符串:</h1><h2 id="问题-9"><a href="#问题-9" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给定 S 和 T 两个字符串，当它们分别被输入到空白的文本编辑器后，判断二者是否相等，并返回结果。 # 代表退格字符。<br>注意：如果对空文本输入退格字符，文本继续为空。</p>
</blockquote>
<h2 id="思路-9"><a href="#思路-9" class="headerlink" title="思路:"></a>思路:</h2><h2 id="方法-9"><a href="#方法-9" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backspaceCompare</span>(<span class="params">self, S: <span class="built_in">str</span>, T: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        <span class="comment"># 使用栈</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">rebuild</span>(<span class="params">input_str</span>):</span></span><br><span class="line">            stack = []</span><br><span class="line">            <span class="keyword">for</span> s <span class="keyword">in</span> input_str:</span><br><span class="line">                <span class="keyword">if</span> s != <span class="string">&#x27;#&#x27;</span>:</span><br><span class="line">                    stack.append(s)</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(stack) &gt; <span class="number">0</span>:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(stack)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> rebuild(S) == rebuild(T)</span><br></pre></td></tr></table></figure>
<h1 id="1544-整理字符串"><a href="#1544-整理字符串" class="headerlink" title="1544. 整理字符串"></a>1544. 整理字符串</h1><h2 id="问题-10"><a href="#问题-10" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给你一个由大小写英文字母组成的字符串 s.<br>一个整理好的字符串中，两个相邻字符 s[i] 和 s[i+1]，其中 0&lt;= i &lt;= s.length-2 ，要满足如下条件:</p>
<ul>
<li>若 s[i] 是小写字符，则 s[i+1] 不可以是相同的大写字符。</li>
<li>若 s[i] 是大写字符，则 s[i+1] 不可以是相同的小写字符。<br>请你将字符串整理好，每次你都可以从字符串中选出满足上述条件的 两个相邻 字符并删除，直到字符串整理好为止。<br>请返回整理好的 字符串 。题目保证在给出的约束条件下，测试样例对应的答案是唯一的。</li>
</ul>
<p><strong>注意</strong>：空字符串也属于整理好的字符串，尽管其中没有任何字符。</p>
</blockquote>
<p>示例:</p>
<blockquote>
<p>输入：s = “abBAcC”<br>输出：””<br>解释：存在多种不同情况，但所有的情况都会导致相同的结果。例如：<br>“abBAcC” –&gt; “aAcC” –&gt; “cC” –&gt; “”<br>“abBAcC” –&gt; “abBA” –&gt; “aA” –&gt; “”</p>
</blockquote>
<h2 id="思路-10"><a href="#思路-10" class="headerlink" title="思路:"></a>思路:</h2><p>…</p>
<h2 id="方法-10"><a href="#方法-10" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">makeGood</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; str:</span></span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> res <span class="keyword">and</span> res[-<span class="number">1</span>].lower() == c.lower() <span class="keyword">and</span> res[-<span class="number">1</span>] != c:</span><br><span class="line">                res.pop()</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                res.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(res)</span><br></pre></td></tr></table></figure>
<h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20. 有效的括号:"></a>20. 有效的括号:</h1><h2 id="问题-11"><a href="#问题-11" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。<br>有效字符串需满足：</p>
<ul>
<li>左括号必须用相同类型的右括号闭合。</li>
<li>左括号必须以正确的顺序闭合。</li>
</ul>
</blockquote>
<h2 id="思路-11"><a href="#思路-11" class="headerlink" title="思路:"></a>思路:</h2><h2 id="方法-11"><a href="#方法-11" class="headerlink" title="方法:"></a>方法:</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isValid</span>(<span class="params">self, s: <span class="built_in">str</span></span>) -&gt; bool:</span></span><br><span class="line">        dmap = &#123;<span class="string">&#x27;&#125;&#x27;</span>: <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;)&#x27;</span>:<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;]&#x27;</span>: <span class="string">&#x27;[&#x27;</span>&#125;</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> s:</span><br><span class="line">            <span class="keyword">if</span> stack <span class="keyword">and</span> c <span class="keyword">in</span> dmap:</span><br><span class="line">                <span class="keyword">if</span> stack[-<span class="number">1</span>] == dmap[c]:</span><br><span class="line">                    stack.pop()</span><br><span class="line">                <span class="keyword">else</span>: <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">else</span>: stack.append(c)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> stack</span><br></pre></td></tr></table></figure>
<h1 id="173-二叉搜索树迭代器-中"><a href="#173-二叉搜索树迭代器-中" class="headerlink" title="173. 二叉搜索树迭代器(中):"></a>173. 二叉搜索树迭代器(中):</h1><h2 id="问题-12"><a href="#问题-12" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。<br>调用 next() 将返回二叉搜索树中的下一个最小的数。<br><img src="/images/leetcode/173_BStree.png"></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">BSTIterator iterator &#x3D; new BSTIterator(root);</span><br><span class="line">iterator.next();    &#x2F;&#x2F; 返回 3</span><br><span class="line">iterator.next();    &#x2F;&#x2F; 返回 7</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; 返回 true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; 返回 9</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; 返回 true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; 返回 15</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; 返回 true</span><br><span class="line">iterator.next();    &#x2F;&#x2F; 返回 20</span><br><span class="line">iterator.hasNext(); &#x2F;&#x2F; 返回 false</span><br></pre></td></tr></table></figure>
<p><strong>提示</strong>:</p>
<ul>
<li>next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。</li>
<li>你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。</li>
</ul>
<h2 id="思路-12"><a href="#思路-12" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/binary-search-tree-iterator/solution/er-cha-sou-suo-shu-die-dai-qi-by-leetcode/">参考</a><br>二叉搜索树的一个重要的特性是是二叉搜索树的中序序列是升序序列；因此，中序遍历是该解决方案的核心</p>
<h2 id="方法-12"><a href="#方法-12" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-扁平化二叉搜索树"><a href="#方法一-扁平化二叉搜索树" class="headerlink" title="方法一: 扁平化二叉搜索树"></a>方法一: 扁平化二叉搜索树</h3><p>将二叉搜索树按中序遍历开展;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="comment"># 存放排序后的元素</span></span><br><span class="line">        self.sort_array = []</span><br><span class="line">        <span class="comment"># 记录下一个最小值的索引</span></span><br><span class="line">        self.index = -<span class="number">1</span></span><br><span class="line">        <span class="comment"># 将树元素入列表</span></span><br><span class="line">        self._inorder(root)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_inorder</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将树元素按中序遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._inorder(root.left)</span><br><span class="line">        self.sort_array.append(root.val)</span><br><span class="line">        self._inorder(root.right)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        self.index += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> self.sort_array[self.index]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> self.index + <span class="number">1</span> &lt; <span class="built_in">len</span>(self.sort_array)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your BSTIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = BSTIterator(root)</span></span><br><span class="line"><span class="comment"># param_1 = obj.next()</span></span><br><span class="line"><span class="comment"># param_2 = obj.hasNext()</span></span><br></pre></td></tr></table></figure>
<h3 id="方法二-受控递归"><a href="#方法二-受控递归" class="headerlink" title="方法二: 受控递归:"></a>方法二: 受控递归:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BSTIterator</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="comment"># 记录所有的左节点</span></span><br><span class="line">        self.stack = []</span><br><span class="line">        <span class="comment"># 将树元素入列表</span></span><br><span class="line">        self._left_inorder(root)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_left_inorder</span>(<span class="params">self, root: TreeNode</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;将树的左节点遍历&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self.stack.append(root)</span><br><span class="line">        self._left_inorder(root.left)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">next</span>(<span class="params">self</span>) -&gt; int:</span></span><br><span class="line">        top_node = self.stack.pop()</span><br><span class="line">        <span class="keyword">if</span> top_node.right:</span><br><span class="line">            <span class="comment"># 遍历右节点的左节点</span></span><br><span class="line">            self._left_inorder(top_node.right)</span><br><span class="line">        <span class="keyword">return</span> top_node.val</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasNext</span>(<span class="params">self</span>) -&gt; bool:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.stack) &gt; <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your BSTIterator object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = BSTIterator(root)</span></span><br><span class="line"><span class="comment"># param_1 = obj.next()</span></span><br><span class="line"><span class="comment"># param_2 = obj.hasNext()</span></span><br></pre></td></tr></table></figure>
<h1 id="94-二叉树的中序遍历"><a href="#94-二叉树的中序遍历" class="headerlink" title="94. 二叉树的中序遍历:"></a>94. 二叉树的中序遍历:</h1><h2 id="问题-13"><a href="#问题-13" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给定一个二叉树的根节点 root ，返回它的 中序 遍历<br><img src="/images/leetcode/94_zhongxu.png"></p>
</blockquote>
<h2 id="思路-13"><a href="#思路-13" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/er-cha-shu-de-hou-xu-bian-li-by-leetcode-solution/">参考</a></p>
<h2 id="方法-13"><a href="#方法-13" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-基本思路"><a href="#方法一-基本思路" class="headerlink" title="方法一: 基本思路"></a>方法一: 基本思路</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">return</span> self._sort_nodes(root, []) <span class="keyword">if</span> self._sort_nodes(root, []) <span class="keyword">else</span> []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_sort_nodes</span>(<span class="params">self, root: TreeNode, res: List[<span class="built_in">int</span>]</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        self._sort_nodes(root.left, res)</span><br><span class="line">        res.append(root.val)</span><br><span class="line">        self._sort_nodes(root.right, res)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="方法二-内函数"><a href="#方法二-内函数" class="headerlink" title="方法二: 内函数:"></a>方法二: 内函数:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">_sort_nodes</span>(<span class="params">root: TreeNode</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            _sort_nodes(root.left)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">            _sort_nodes(root.right)</span><br><span class="line">        </span><br><span class="line">        _sort_nodes(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="方法三-辅助栈"><a href="#方法三-辅助栈" class="headerlink" title="方法三: 辅助栈:"></a>方法三: 辅助栈:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        node_list = []</span><br><span class="line">        node_vals = []</span><br><span class="line">        node = root</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> node_list <span class="keyword">or</span> node:</span><br><span class="line">            <span class="keyword">while</span> node:</span><br><span class="line">                node_list.append(node)</span><br><span class="line">                node = node.left</span><br><span class="line">            node = node_list.pop()</span><br><span class="line">            node_vals.append(node.val)</span><br><span class="line">            node = node.right</span><br><span class="line">        <span class="keyword">return</span> node_vals</span><br></pre></td></tr></table></figure>
<h1 id="145-二叉树的后序遍历-中"><a href="#145-二叉树的后序遍历-中" class="headerlink" title="145. 二叉树的后序遍历(中)"></a>145. 二叉树的后序遍历(中)</h1><h2 id="问题-14"><a href="#问题-14" class="headerlink" title="问题:"></a>问题:</h2><blockquote>
<p>给定一个二叉树，返回它的 <em>后序</em> 遍历。<br>示例:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: [1,null,2,3]  </span><br><span class="line">   1</span><br><span class="line">    \</span><br><span class="line">     2</span><br><span class="line">    &#x2F;</span><br><span class="line">   3 </span><br><span class="line"></span><br><span class="line">输出: [3,2,1]</span><br></pre></td></tr></table></figure>
<h2 id="思路-14"><a href="#思路-14" class="headerlink" title="思路:"></a>思路:</h2><p><a href="https://leetcode-cn.com/problems/binary-tree-postorder-traversal/solution/">参考</a></p>
<h2 id="方法-14"><a href="#方法-14" class="headerlink" title="方法:"></a>方法:</h2><h3 id="方法一-递归"><a href="#方法一-递归" class="headerlink" title="方法一: 递归:"></a>方法一: 递归:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        res = []</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">sort_nodes</span>(<span class="params">root: TreeNode</span>):</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root: <span class="keyword">return</span></span><br><span class="line">            sort_nodes(root.left)</span><br><span class="line">            sort_nodes(root.right)</span><br><span class="line">            res.append(root.val)</span><br><span class="line">        sort_nodes(root)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<h3 id="方法二-迭代"><a href="#方法二-迭代" class="headerlink" title="方法二: 迭代:"></a>方法二: 迭代:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">postorderTraversal</span>(<span class="params">self, root: TreeNode</span>) -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> root:</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        res, stack = [], []</span><br><span class="line">        node = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> stack <span class="keyword">or</span> root:</span><br><span class="line">            <span class="keyword">while</span> root:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.left</span><br><span class="line">            root = stack.pop()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> root.right <span class="keyword">or</span> root.right == node:</span><br><span class="line">                res.append(root.val)</span><br><span class="line">                node = root</span><br><span class="line">                root = <span class="literal">None</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                stack.append(root)</span><br><span class="line">                root = root.right</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>LeetCode</category>
        <category>算法</category>
        <category>栈</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>算法</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>python标准库01</title>
    <url>/2021/01/04/python_001_Index/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述:"></a>一、概述:</h1><p>本项目用来记录学习过程中的代码:<a href="https://github.com/chengfeiZhou/PythonLearn">https://github.com/chengfeiZhou/PythonLearn</a><br>python官方包索引:<a href="https://pypi.org/">https://pypi.org/</a></p>
<h1 id="二、内置函数"><a href="#二、内置函数" class="headerlink" title="二、内置函数:"></a>二、内置函数:</h1><h2 id="1-abs-x-绝对值"><a href="#1-abs-x-绝对值" class="headerlink" title="1. abs(x): 绝对值:"></a>1. abs(x): 绝对值:</h2><p>返回一个数的绝对值. 参数可以是整数、浮点数或任何实现了<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__abs__"><code>__abs__()</code></a>的对象. 如果参数是一个复数, 则返回它的模</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;绝对值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = -<span class="number">1</span></span><br><span class="line">    b = <span class="number">3.14</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    d = Num(<span class="number">666</span>)</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(a)&#125;</span>&quot;</span>)   <span class="comment"># -1的绝对值是: 1</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(b)&#125;</span>&quot;</span>)   <span class="comment"># 3.14的绝对值是: 3.14</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(c)&#125;</span>&quot;</span>)   <span class="comment"># 0的绝对值是: 0</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;d&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(d)&#125;</span>&quot;</span>)   <span class="comment"># &lt;__main__.Num object at 0x7feaaca58350&gt;的绝对值是: 绝对值</span></span><br></pre></td></tr></table></figure>
<h2 id="2-all-iterable-amp-any-iterable-判断元素真值"><a href="#2-all-iterable-amp-any-iterable-判断元素真值" class="headerlink" title="2. all(iterable) &amp; any(iterable): 判断元素真值:"></a>2. all(iterable) &amp; any(iterable): 判断元素真值:</h2><h3 id="2-1-all-iterable"><a href="#2-1-all-iterable" class="headerlink" title="2.1 all(iterable):"></a>2.1 all(iterable):</h3><p>如果<code>iterable</code>的所有元素均为真值(或可迭代对象为空)则返回<code>True</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-any-iterable"><a href="#2-2-any-iterable" class="headerlink" title="2.2 any(iterable):"></a>2.2 any(iterable):</h3><p>如果<code>iterable</code>的任一元素为真值则返回<code>True</code>. 如果可迭代对象为空, 返回<code>False</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-例子"><a href="#2-3-例子" class="headerlink" title="2.3 例子:"></a>2.3 例子:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">    arr2 = [<span class="string">&quot;&quot;</span>, &#123;&#125;, <span class="number">0</span>]</span><br><span class="line">    print(<span class="string">f&quot;arr1的all: <span class="subst">&#123;<span class="built_in">all</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr2的all: <span class="subst">&#123;<span class="built_in">all</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr2的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: True</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: False</span></span><br></pre></td></tr></table></figure>
<h2 id="3-ascii-object-返回对象可打印的字符串的转义"><a href="#3-ascii-object-返回对象可打印的字符串的转义" class="headerlink" title="3. ascii(object): 返回对象可打印的字符串的转义:"></a>3. ascii(object): 返回对象可打印的字符串的转义:</h2><p>就像函数<code>repr()</code>, 返回一个对象可打印的字符串, 但是<code>repr()</code>返回的字符串中非 ASCII 编码的字符,会使用 <code>\x</code>、<code>\u</code>和<code>\U</code>来转义. 生成的字符串和 Python2 的<code>repr()</code>返回的结果相似.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个类的repr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="number">12345567</span>))  <span class="comment">#  12345567</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;hello world!&quot;</span>)) <span class="comment"># &#x27;hello world!&#x27;</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;你好!&quot;</span>))    <span class="comment"># &#x27;\u4f60\u597d!&#x27;</span></span><br><span class="line"></span><br><span class="line">    s = Stu()</span><br><span class="line">    t = Teacher()</span><br><span class="line">    print(<span class="built_in">ascii</span>(s)) <span class="comment"># \u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684repr</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(t)) <span class="comment"># &lt;__main__.Teacher object at 0x7fd100259350</span></span><br></pre></td></tr></table></figure>
<h2 id="4-bin-x-整数二进制"><a href="#4-bin-x-整数二进制" class="headerlink" title="4. bin(x): 整数二进制:"></a>4. bin(x): 整数二进制:</h2><p>将一个整数转变为一个前缀为”0b”的二进制字符串. 结果是一个合法的 Python 表达式. 如果 x 不是 Python 的 <code>int</code> 对象，那它需要定义 <code>__index__()</code> 方法返回一个整数. 一些例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(3)</span></span><br><span class="line">&#x27;0b11&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(-10)</span></span><br><span class="line">&#x27;-0b1010&#x27;</span><br></pre></td></tr></table></figure>
<p>如果不一定需要前缀“0b”，还可以使用如下的方法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; format(14, <span class="string">&#x27;#b&#x27;</span>), format(14, <span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f<span class="string">&#x27;&#123;14:#b&#125;&#x27;</span>, f<span class="string">&#x27;&#123;14:b&#125;&#x27;</span></span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="5-class-bool-x"><a href="#5-class-bool-x" class="headerlink" title="5. class bool([x]):"></a>5. class bool([x]):</h2><p><code>在 3.7 版更改: x 现在只能作为位置参数</code><br>返回一个布尔, <code>True</code> 或者 <code>False</code>.  x 使用标准的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#truth">真值测试过程</a> 来转换. 如果 x 是假的或者被省略, 返回 <code>False</code>; 其他情况返回 <code>True</code>. <code>bool</code> 类是 <code>int</code> 的子类(参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a>). 其他类不能继承自它.它只有 <code>False</code> 和 <code>True</code> 两个实例.</p>
<h2 id="6-breakpoint-args-kws-断点调试"><a href="#6-breakpoint-args-kws-断点调试" class="headerlink" title="6. breakpoint(*args, **kws):断点调试:"></a>6. breakpoint(*args, **kws):断点调试:</h2><p><code>3.7 新版功能</code><br><code>简单可以理解为是一个debug打点函数</code><br>此函数会在调用时将你陷入调试器中. 具体来说, 它调用 <code>sys.breakpointhook()</code>, 直接传递 <code>args</code> 和 <code>kws</code>. 默认情况下, <code>sys.breakpointhook()</code> 调用 <code>pdb.set_trace()</code> 且没有参数. 在这种情况下, 它纯粹是一个便利函数, 因此您不必显式导入 <code>pdb</code> 且键入尽可能少的代码即可进入调试器. 但是, <code>sys.breakpointhook()</code> 可以设置为其他一些函数并被 <code>breakpoint()</code> 自动调用, 以允许进入你想用的调试器.<code>引发一个 审计事件</code>builtins.breakpoint<code>并附带参数</code>breakpointhook`.<br><a href="https://www.jianshu.com/p/5d3c52c5c2a2">详细参看</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    str1 = <span class="string">&quot;hello world! d你好, 世界!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="built_in">breakpoint</span>()</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pythonIndex/06_breakpoint.png"><br>Tips:</p>
<ul>
<li>命令 <code>p</code> 用于查看表达式的值; </li>
<li>命令 <code>c</code> 用于退出调试器, 并继续执行程序;</li>
</ul>
<h2 id="7-class-bytearray-amp-class-bytes"><a href="#7-class-bytearray-amp-class-bytes" class="headerlink" title="7. class bytearray() &amp; class bytes():"></a>7. class bytearray() &amp; class bytes():</h2><h3 id="7-1-class-bytearray-source-encoding-errors"><a href="#7-1-class-bytearray-source-encoding-errors" class="headerlink" title="7.1 class bytearray([source[, encoding[, errors]]]):"></a>7.1 class bytearray([source[, encoding[, errors]]]):</h3><p>返回一个新的 bytes 数组. bytearray 类是一个可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. 它有<code>可变序列类型</code>大部分常见的方法；同时有 <code>bytes</code> 类型的大部分方法。<br>可选形参 source 可以用不同的方式来初始化数组：</p>
<ul>
<li>如果是一个<code>string</code>,您必须提供<code>encoding</code>参数(errors 参数仍是可选的); <code>bytearray()</code>会使用 <code>str.encode()</code>方法来将 string 转变成 bytes;</li>
<li>如果是一个<code>integer</code>, 会初始化大小为该数字的数组, 并使用 null 字节填充.</li>
<li>如果是一个遵循 <code>缓冲区接口</code> 的对象, 该对象的只读缓冲区将被用来初始化字节数组;</li>
<li>如果是一个 <code>iterable</code> 可迭代对象, 它的元素的范围必须是 <code>0 &lt;= x &lt; 256</code> 的整数, 它会被用作数组的初始内容;</li>
<li>如果没有实参, 则创建大小为 <code>0</code>的数组;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strB = <span class="built_in">bytearray</span>(<span class="string">&quot;hello world&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    intB = <span class="built_in">bytearray</span>(<span class="number">4</span>)</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">128</span>])</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    print(strB)</span><br><span class="line">    print(intB)</span><br><span class="line">    print(iterB)</span><br><span class="line">    print(iterB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./7_1_bytearray.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bufferB = <span class="built_in">bytearray</span>(f.read(), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        print(bufferB)</span><br></pre></td></tr></table></figure>
<img src="/images/pythonIndex/7_1_butearray.png"></li>
</ul>
<h3 id="7-2-class-bytes-source-encoding-errors"><a href="#7-2-class-bytes-source-encoding-errors" class="headerlink" title="7.2 class bytes([source[, encoding[, errors]]])"></a>7.2 class bytes([source[, encoding[, errors]]])</h3><p>返回一个新的<code>bytes</code>对象, 是一个不可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. <code>bytes</code> 是 <code>bytearray</code> 的不可变版本 - 它有其中不改变序列的方法和相同的索引、切片操作;<br>因此，构造函数的实参和 <code>bytearray()</code> 相同;<br>字节对象还可以用字面值创建;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strB = <span class="built_in">bytes</span>(<span class="string">&quot;hello world&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    intB = <span class="built_in">bytes</span>(<span class="number">4</span>)</span><br><span class="line">    iterB = <span class="built_in">bytes</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">128</span>])</span><br><span class="line">    iterB = <span class="built_in">bytes</span>()</span><br><span class="line"></span><br><span class="line">    print(strB)</span><br><span class="line">    print(intB)</span><br><span class="line">    print(iterB)</span><br><span class="line">    print(iterB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./06_breakpoint.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bufferB = <span class="built_in">bytes</span>(f.read(), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        print(bufferB)</span><br></pre></td></tr></table></figure>
<h3 id="7-3-补充"><a href="#7-3-补充" class="headerlink" title="7.3 补充:"></a>7.3 补充:</h3><p>另见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binaryseq">二进制序列类型 — bytes, bytearray, memoryview</a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typebytes">bytes 对象</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>;</p>
<h2 id="8-callable-object-判断可调用"><a href="#8-callable-object-判断可调用" class="headerlink" title="8.callable(object): 判断可调用:"></a>8.callable(object): 判断可调用:</h2><p>如果返回<code>Flase</code>, 则<code>object</code>不可被调用; 如果返回<code>True</code>,则<code>object</code>可被调用,但有可能失败; 请注意类是可调用的(调用类将返回一个新的实例); 如果实例所属的类有 <code>__call__()</code> 则它就是可调用的;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test1</span>():</span></span><br><span class="line">    print(<span class="string">&quot;调用test1&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test2</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化Test2&quot;</span>)</span><br><span class="line"></span><br><span class="line">test3 = <span class="string">&quot;hello&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(test1): <span class="comment"># 调用test1</span></span><br><span class="line">        test1()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(Test2): <span class="comment"># 实例化Test2</span></span><br><span class="line">        t2 = Test2()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">callable</span>(test3): <span class="comment"># 不可调用</span></span><br><span class="line">        test3()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;不可调用&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="9-chr-i-返回i对应的unicode"><a href="#9-chr-i-返回i对应的unicode" class="headerlink" title="9. chr(i): 返回i对应的unicode:"></a>9. chr(i): 返回i对应的unicode:</h2><p>返回 Unicode 码位为整数 i 的字符的字符串格式;例如,<code>chr(97)</code> 返回字符串 <code>&#39;a&#39;</code>，<code>chr(8364)</code> 返回字符串 <code>&#39;€&#39;</code>; 这是 <code>ord()</code> 的逆函数;<br>实参的合法范围是 0 到 1,114,111(16 进制表示是 0x10FFFF); 如果 i 超过这个范围，会触发 <code>ValueError</code> 异常;</p>
<h2 id="10-classmethod-一个方法封装成类方法"><a href="#10-classmethod-一个方法封装成类方法" class="headerlink" title="10. @classmethod: 一个方法封装成类方法:"></a>10. @classmethod: 一个方法封装成类方法:</h2><p>把一个方法封装成类方法;<br>一个类方法把类自己作为第一个实参, 就像一个实例方法把实例自己作为第一个实参; 请用以下习惯来声明类方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">cls, arg1, arg2, ...</span>):</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure>
<p><code>@classmethod</code> 这样的形式称为函数的 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">decorator</a> – 详情参阅 <a href="https://docs.python.org/zh-cn/3/reference/compound_stmts.html#function">函数定义</a></p>
<p>类方法的调用可以在类上进行 (例如 <code>C.f()</code>) 也可以在实例上进行 (例如 <code>C().f()</code>); 其所属类以外的类实例会被忽略。 如果类方法在其所属类的派生类上调用，则该派生类对象会被作为隐含的第一个参数被传入;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        print(<span class="string">&quot;实例化Test&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;hello, <span class="subst">&#123;self.name&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">cls</span>):</span></span><br><span class="line">        print(<span class="string">f&quot;你好, <span class="subst">&#123;cls.name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    Test.hello()    <span class="comment"># 你好, 李四</span></span><br><span class="line"></span><br><span class="line">    Test().say()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    hello, 张三</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    Test().hello()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    你好, 李四</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    Test.name = <span class="string">&quot;王五&quot;</span></span><br><span class="line">    Test.hello() <span class="comment"># 你好, 王五</span></span><br><span class="line"></span><br><span class="line">    Test().hello()</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    实例化Test</span></span><br><span class="line"><span class="string">    你好, 王五</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>类方法与 C++ 或 Java 中的静态方法不同;</p>
<p>在 3.9 版更改: 类方法现在可以包装其他 <a href="https://docs.python.org/zh-cn/3/glossary.html#term-decorator">装饰器</a>;</p>
<h2 id="11-compile-source-filename-mode-flags-0-dont-inherit-False-optimize-1-编译成代码或AST对象"><a href="#11-compile-source-filename-mode-flags-0-dont-inherit-False-optimize-1-编译成代码或AST对象" class="headerlink" title="11. compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1): 编译成代码或AST对象:"></a>11. compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1): 编译成代码或AST对象:</h2><p>将 <code>source</code> 编译成代码或 <code>AST</code> 对象;代码对象可以被 <code>exec()</code> 或 <code>eval()</code> 执行; </p>
<ul>
<li><code>source</code>: 可以是常规的字符串、字节字符串，或者 <code>AST</code> 对象;</li>
<li><code>filename</code>: 实参需要是代码读取的文件名; 如果代码不需要从文件中读取, 可以传入一些可辨识的值(经常会使用 <code>&#39;&lt;string&gt;&#39;</code>);</li>
<li><code>mode</code>:  实参指定了编译代码必须用的模式;<ul>
<li><code>source</code> 是语句序列, 可以是 <code>&#39;exec&#39;</code>;</li>
<li>单一表达式, 可以是 <code>&#39;eval&#39;</code>;</li>
<li>单个交互式语句, 可以是 <code>&#39;single&#39;</code>;</li>
<li>表达式执行结果不是 <code>None</code> 将会被打印出来;</li>
</ul>
</li>
<li><code>flags</code> 和 <code>dont_inherit</code>: 可选参数, 制应当激活哪个 <a href="https://docs.python.org/zh-cn/3/library/ast.html#module-ast">编译器选项</a> 以及应当允许哪个 <a href="https://docs.python.org/zh-cn/3/reference/simple_stmts.html#future">future 特性</a><ul>
<li>编译器选项和 future 语句是由比特位来指明的; 比特位可以通过一起按位 <code>OR</code> 来指明多个选项; <ul>
<li>指明特定 <code>future</code> 特性所需的比特位可以在 <a href="https://docs.python.org/zh-cn/3/library/__future__.html#module-__future__"><code>__future__</code></a> 模块的 <code>_Feature</code> 实例的 <code>compiler_flag</code> 属性中找到;</li>
<li>编译器旗标 可以在 <a href="https://docs.python.org/zh-cn/3/library/ast.html#compiler-flags"><code>ast</code></a> 模块中查找带有 <code>PyCF_</code> 前缀的名称;</li>
</ul>
</li>
</ul>
</li>
<li><code>optimize</code> 实参指定编译器的优化级别:<ul>
<li>默认值 <code>-1</code> 选择与解释器的 <code>-O</code> 选项相同的优化级别;</li>
<li>显式级别为<code>0</code>: 没有优化; <code>__debug__</code> 为真;</li>
<li>显式级别为<code>1</code>: 断言被删除, <code>__debug__</code> 为假;</li>
<li>显式级别为<code>2</code>: (文档字符串也被删除);</li>
</ul>
</li>
</ul>
<p>如果编译的源码不合法, 此函数会触发 <code>SyntaxError</code>异常;<br>如果源码包含 <code>null</code> 字节，则会触发 <code>ValueError</code> 异常;<br><em>历史修改:</em></p>
<ul>
<li>在 3.2 版更改: 允许使用 Windows 和 Mac 的换行符; 在 <code>&#39;exec&#39;</code> 模式不再需要以换行符结尾; 增加了 optimize 形参;</li>
<li>在 3.5 版更改: 之前 source 中包含 null 字节的话会触发 <code>TypeError </code>异常;</li>
<li>3.8 新版功能: <code>ast.PyCF_ALLOW_TOP_LEVEL_AWAIT</code>现在可在旗标中传入以启用对最高层级 <code>await</code>, <code>async for</code> 和 <code>async with</code> 的支持;</li>
</ul>
<p><strong>警告:</strong><br>在将足够大或者足够复杂的字符串编译成 <code>AST</code> 对象时, <code>Python</code> 解释器有可能因为 <code>Python AST</code> 编译器的栈深度限制而崩溃;</p>
<h2 id="12-class-complex-real-imag-复数类"><a href="#12-class-complex-real-imag-复数类" class="headerlink" title="12. class complex([real[, imag]]): 复数类:"></a>12. class complex([real[, imag]]): 复数类:</h2><p>返回值为 <code>real + imag*1j</code> 的复数, 或将字符串或数字转换为复数;</p>
<ul>
<li>如果第一个形参是字符串, 则它被解释为一个复数, 并且函数调用时必须没有第二个形参;</li>
<li>第二个形参不能是字符串; </li>
<li>每个实参都可以是任意的数值类型(包括复数);</li>
<li>如果省略了 <code>imag</code>, 则默认值为零, 构造函数会像 <code>int</code> 和 <code>float</code>一样进行数值转换;<br>如果两个实参都省略,则返回 <code>0j</code>;</li>
</ul>
<p>对于一个普通 Python 对象 <code>x</code>，<code>complex(x)</code> 会委托给 <code>x.__complex__()</code>;如果 <code>__complex__()</code> 未定义则将回退至 <code>__float__()</code>; 如果 <code>__float__()</code> 未定义则将回退至<code> __index__()</code></p>
<blockquote>
<p><strong>注解</strong> 当从字符串转换时, 字符串在 <code>+</code> 或 <code>-</code> 的周围必须不能有空格;<br>例如 <code>complex(&#39;1+2j&#39;)</code> 是合法的，但 <code>complex(&#39;1 + 2j&#39;)</code> 会触发 <code>ValueError</code> 异常;</p>
</blockquote>
<p><strong>历史:</strong></p>
<ul>
<li>在 3.6 版更改: 您可以使用下划线将代码文字中的数字进行分组。</li>
<li>在 3.8 版更改: 如果 <code>__complex__()</code> 和 <code>__float__()</code> 未定义则回退至 <code>__index__()</code>;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test3</span>(<span class="params"><span class="built_in">object</span></span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化test3&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test4</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;实例化test4&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__complex__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">complex</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    t1 = <span class="built_in">complex</span>(<span class="string">&quot;2+3j&quot;</span>)</span><br><span class="line">    t2 = <span class="built_in">complex</span>(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    print(t1)   <span class="comment"># (2+3j)</span></span><br><span class="line">    print(t2)   <span class="comment"># (4+6j)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># TypeError: complex() first argument must be a string or a number, not &#x27;Test3&#x27;</span></span><br><span class="line">    <span class="comment"># t3 = complex(Test3())   </span></span><br><span class="line">    <span class="comment"># print(t3)</span></span><br><span class="line"></span><br><span class="line">    t4 = <span class="built_in">complex</span>(Test4())   <span class="comment"># 实例化test4</span></span><br><span class="line">    print(t4)   <span class="comment"># (3+4j)</span></span><br></pre></td></tr></table></figure>
<h2 id="13-delattr-object-name-删除object的属性"><a href="#13-delattr-object-name-删除object的属性" class="headerlink" title="13.delattr(object, name): 删除object的属性;"></a>13.delattr(object, name): 删除object的属性;</h2><code>setattr()</code>相关的函数;实参是一个对象和一个字符串;该字符串必须是对象的某个属性;如果对象允许, 该函数将删除指定的属性;<br>例如 <code>delattr(x, &#39;foobar&#39;)</code> 等价于<code>del x.foobar</code><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, addr</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.addr = addr</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;name: <span class="subst">&#123;self.name&#125;</span>, age: <span class="subst">&#123;self.age&#125;</span>, addr: <span class="subst">&#123;self.addr&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tt = Test(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">18</span>, <span class="string">&quot;北京&quot;</span>)</span><br><span class="line">    print(<span class="string">f&quot;source: <span class="subst">&#123;tt&#125;</span>&quot;</span>)  <span class="comment"># source: name: zhangsan, age: 18, addr: 北京</span></span><br><span class="line">    <span class="built_in">delattr</span>(tt, <span class="string">&quot;addr&quot;</span>)  <span class="comment"># delattr(tt, &#x27;addr&#x27;) 等价于 del tt.addr</span></span><br><span class="line">    print(tt.name)  <span class="comment"># 张三</span></span><br><span class="line">    print(tt.age)   <span class="comment"># 18</span></span><br><span class="line">    print(tt.addr)  <span class="comment"># AttributeError: &#x27;Test&#x27; object has no attribute &#x27;addr&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="14-class-dict-字典对象"><a href="#14-class-dict-字典对象" class="headerlink" title="14. class dict(): 字典对象"></a>14. class dict(): 字典对象</h2><code>class dict(**kwarg)</code>;<br><code>class dict(mapping, **kwarg)</code>;<br><code>class dict(iterable, **kwarg)</code>;<br>创建一个新的字典; dict 对象是一个字典类;</li>
</ul>
<h2 id="15-dir-object-返回调用列表"><a href="#15-dir-object-返回调用列表" class="headerlink" title="15. dir([object]): 返回调用列表:"></a>15. dir([object]): 返回调用列表:</h2><ul>
<li>如果没有实参，则返回当前本地作用域中的名称列表;</li>
<li>如果有实参，它会尝试返回该对象的有效属性列表;</li>
</ul>
<p>如果对象有一个名为 <code>__dir__()</code> 的方法, 那么该方法将被调用, 并且必须返回一个属性列表; 这允许实现自定义 <code>__getattr__()</code> 或 <code>__getattribute__()</code> 函数的对象能够自定义 <code>dir()</code> 来报告它们的属性。</p>
<p>如果对象不提供 <code>__dir__()</code>, 这个函数会尝试从对象已定义的 <code>__dict__</code> 属性和类型对象收集信息; 结果列表并不总是完整的, 如果对象有自定义 <code>__getattr__()</code>，那结果可能不准确;</p>
<p>默认的 <code>dir()</code> 机制对不同类型的对象行为不同, 它会试图返回最相关而不是最全的信息:</p>
<ul>
<li>如果对象是模块对象, 则列表包含模块的属性名称;</li>
<li>如果对象是类型或类对象, 则列表包含它们的属性名称, 并且递归查找所有基类的属性; </li>
<li>否则, 列表包含对象的属性名称, 它的类属性名称, 并且递归查找它的类的所有基类的属性;</li>
</ul>
<p>返回的列表按字母表排序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__dir__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> [<span class="string">&#x27;area&#x27;</span>, <span class="string">&#x27;perimeter&#x27;</span>, <span class="string">&#x27;location&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">dir</span>())  <span class="comment"># 打印当前本地作用域中的名称列表</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [&#x27;Shape&#x27;, &#x27;__annotations__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;struct&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    print(<span class="built_in">dir</span>(struct))  <span class="comment"># 打印struct模块的名称列表</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [&#x27;Struct&#x27;, &#x27;__all__&#x27;, &#x27;__builtins__&#x27;, &#x27;__cached__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;_clearcache&#x27;, &#x27;calcsize&#x27;, &#x27;error&#x27;, &#x27;iter_unpack&#x27;, &#x27;pack&#x27;, &#x27;pack_into&#x27;, &#x27;unpack&#x27;, &#x27;unpack_from&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ss = Shape()</span><br><span class="line">    print(<span class="built_in">dir</span>(ss))</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    [&#x27;area&#x27;, &#x27;location&#x27;, &#x27;perimeter&#x27;]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>因为 <code>dir()</code> 主要是为了便于在交互式时使用, 所以它会试图返回人们感兴趣的名字集合, 而不是试图保证结果的严格性或一致性, 它具体的行为也可能在不同版本之间改变; 例如, 当实参是一个类时, <code>metaclass</code> 的属性不包含在结果列表中;</p>
</blockquote>
<h2 id="16-divmod-a-b-返回商和余数"><a href="#16-divmod-a-b-返回商和余数" class="headerlink" title="16. divmod(a,b): 返回商和余数:"></a>16. divmod(a,b): 返回商和余数:</h2><p>将两个(非复数)数字作为实参, 并在执行整数除法时返回一对”商”和”余数”; </p>
<ul>
<li>对于混合操作数类型, 适用双目算术运算符的规则; </li>
<li>对于整数，结果和 <code>(a // b, a % b)</code> 一致;</li>
<li>对于浮点数，结果是 <code>(q, a % b)</code> , <code>q</code> 通常是 <code>math.floor(a / b)</code> 但可能会比 1 小; <ul>
<li>在任何情况下, <code>q * b + a % b</code> 和 <code>a</code> 基本相等; </li>
<li>如果 <code>a % b</code> 非零, 它的符号和 <code>b</code> 一样，并且 <code>0 &lt;= abs(a % b) &lt; abs(b)</code>;</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">divmod</span>(<span class="number">5</span>, <span class="number">2</span>))  <span class="comment"># (2, 1)</span></span><br><span class="line">    print(<span class="built_in">divmod</span>(<span class="number">3.3</span>, <span class="number">2.2</span>))  <span class="comment"># (1.0, 1.0999999999999996)</span></span><br></pre></td></tr></table></figure>
<h2 id="17-enumerate-iterable-start-0-返回一个枚举对象"><a href="#17-enumerate-iterable-start-0-返回一个枚举对象" class="headerlink" title="17. enumerate(iterable, start=0): 返回一个枚举对象"></a>17. enumerate(iterable, start=0): 返回一个枚举对象</h2><p><code>通常用于for循环</code></p>
<ul>
<li><code>iterable</code> 必须是一个序列, 或<code>iterator</code>, 或其他支持迭代的对象;</li>
<li><code>enumerate()</code> 返回的迭代器的 <code>__next__()</code> 方法返回一个元组, 里面包含一个计数值(从 <code>start</code> 开始，默认为 0)和通过迭代 <code>iterable</code> 获得的值;</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    seasons = [<span class="string">&#x27;Spring&#x27;</span>, <span class="string">&#x27;Summer&#x27;</span>, <span class="string">&#x27;Fall&#x27;</span>, <span class="string">&#x27;Winter&#x27;</span>]</span><br><span class="line">    print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons)))  <span class="comment"># [(0, &#x27;Spring&#x27;), (1, &#x27;Summer&#x27;), (2, &#x27;Fall&#x27;), (3, &#x27;Winter&#x27;)]</span></span><br><span class="line">    print(<span class="built_in">list</span>(<span class="built_in">enumerate</span>(seasons, start=<span class="number">1</span>)))  <span class="comment"># [(1, &#x27;Spring&#x27;), (2, &#x27;Summer&#x27;), (3, &#x27;Fall&#x27;), (4, &#x27;Winter&#x27;)]</span></span><br></pre></td></tr></table></figure>
<h2 id="18-eval-amp-exec"><a href="#18-eval-amp-exec" class="headerlink" title="18. eval &amp; exec:"></a>18. eval &amp; exec:</h2><h3 id="18-1-eval-expression-globals-locals-返回表达式结果"><a href="#18-1-eval-expression-globals-locals-返回表达式结果" class="headerlink" title="18.1 eval(expression[, globals[, locals]]): 返回表达式结果"></a>18.1 eval(expression[, globals[, locals]]): 返回表达式结果</h3><ul>
<li><code>expression</code>实参是一个字符串;</li>
<li>可选的<code>globals</code>实参必须是一个字典;</li>
<li>可选的<code>locals</code>可以是任何映射对象;</li>
</ul>
<p><code>expression</code> 参数会作为一个 Python 表达式(从技术上说是一个条件列表)被解析并求值, 并使用 <code>globals</code> 和 <code>locals</code> 字典作为全局和局部命名空间;<br>如果<code>globals</code> 字典存在且不包含以 <code>__builtins__</code> 为键的值, 则会在解析 <code>expression</code> 之前插入以此为键的对内置模块 <code>builtins</code> 的引用; 这意味着 <code>expression</code> 通常具有对标准 <code>builtins</code> 模块的完全访问权限且受限的环境会被传播;<br>如果省略 <code>locals</code> 字典则其默认值为 <code>globals</code> 字典;<br>如果两个字典同时省略, 则表达式执行时会使用 <code>eval()</code> 被调用的环境中的 <code>globals</code> 和 <code>locals</code>;</p>
<blockquote>
<p>请注意, <code>eval(</code>) 并没有对外围环境下的 (非局部)嵌套作用域 的访问权限;</p>
</blockquote>
<h3 id="18-2-exec-object-globals-locals-动态执行-Python-代码"><a href="#18-2-exec-object-globals-locals-动态执行-Python-代码" class="headerlink" title="18.2 exec(object[, globals[, locals]]): 动态执行 Python 代码;"></a>18.2 exec(object[, globals[, locals]]): 动态执行 Python 代码;</h3><ul>
<li><code>object</code> 必须是字符串或者代码对象;<ul>
<li>如果是字符串, 那么该字符串将被解析为一系列 Python 语句并执行(除非发生语法错误);</li>
<li>如果是代码对象, 它将被直接执行; </li>
<li>在任何情况下，被执行的代码都需要和文件输入一样是有效的;</li>
</ul>
</li>
</ul>
<blockquote>
<p>请注意即使在传递给 <code>exec()</code> 函数的代码的上下文中, <code>return</code> 和 <code>yield</code> 语句也不能在函数定义之外使用; 该函数返回值是 <code>None</code></p>
</blockquote>
<h2 id="19-filter-function-iterable-列表过滤"><a href="#19-filter-function-iterable-列表过滤" class="headerlink" title="19. filter(function, iterable): 列表过滤"></a>19. filter(function, iterable): 列表过滤</h2><p>用 <code>iterable</code> 中函数 <code>function</code> 返回”真”的那些元素, 构建一个新的迭代器;</p>
<ul>
<li><code>iterable</code> 可以是一个序列, 一个支持迭代的容器, 或一个迭代器; 如果 <code>function</code> 是 <code>None</code> , 则会假设它是一个身份函数,即 <code>iterable</code> 中所有返回假的元素会被移除;<blockquote>
<p>请注意, <code>filter(function, iterable)</code> 相当于一个生成器表达式, 当 <code>function</code> 不是 <code>None</code> 的时候为 <code>(item for item in iterable if function(item))</code>; <code>function</code> 是 <code>None</code> 的时候为 <code>(item for item in iterable if item)</code></p>
</blockquote>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding-utf-8</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ll = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">    tl = <span class="built_in">filter</span>(func, ll)</span><br><span class="line">    print(ll, <span class="built_in">list</span>(tl))  <span class="comment"># [0, 1, 2, 3, 4, 5, 6, 7, 8] [0, 2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>请参阅 <a href="https://docs.python.org/zh-cn/3/library/itertools.html#itertools.filterfalse"><code>itertools.filterfalse()</code></a> 了解, 只有 <code>function</code> 返回 <code>false</code> 时才选取 <code>iterable</code> 中元素的补充函数</p>
</blockquote>
<h2 id="20-class-float-x-返回从数字或字符串-x-生成的浮点数"><a href="#20-class-float-x-返回从数字或字符串-x-生成的浮点数" class="headerlink" title="20. class float([x]): 返回从数字或字符串 x 生成的浮点数"></a>20. class float([x]): 返回从数字或字符串 x 生成的浮点数</h2><ul>
<li>如果实参是字符串, 则它必须是包含十进制数字的字符串, 字符串前面可以有符号, 之前也可以有空格;</li>
<li>可选的符号有 ‘+’ 和 ‘-‘; ‘+’ 对创建的值没有影响;</li>
<li>实参也可以是 <code>NaN(非数字)</code>、正负无穷大的字符串;</li>
<li>除去首尾的空格后，输入必须遵循以下语法：</li>
</ul>
<table>
<thead>
<tr>
<th>说明</th>
<th>表示</th>
<th>符号</th>
</tr>
</thead>
<tbody><tr>
<td>sign</td>
<td>签名(符号)</td>
<td>`”+”</td>
</tr>
<tr>
<td>infinity</td>
<td>无穷</td>
<td>`”Infinity”</td>
</tr>
<tr>
<td>nan</td>
<td>非数字</td>
<td>“nan”</td>
</tr>
<tr>
<td>numeric_value</td>
<td>数值</td>
<td>`floatnumber</td>
</tr>
<tr>
<td>numeric_string</td>
<td>数值字符串</td>
<td>[sign] numeric_value</td>
</tr>
</tbody></table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">float</span>(<span class="number">21</span>))  <span class="comment"># 21.0</span></span><br><span class="line">    print(<span class="built_in">float</span>(<span class="string">&quot;25&quot;</span>))  <span class="comment"># 25.0</span></span><br><span class="line">    print(<span class="built_in">float</span>(<span class="string">&quot;nan&quot;</span>))  <span class="comment"># nan</span></span><br><span class="line">    print(<span class="built_in">float</span>(<span class="string">&quot;-29&quot;</span>))  <span class="comment"># -29.0</span></span><br><span class="line">    print(<span class="built_in">float</span>(<span class="string">&quot;inf&quot;</span>))  <span class="comment"># inf</span></span><br><span class="line">    print(<span class="built_in">float</span>(<span class="string">&#x27;+1E6&#x27;</span>))  <span class="comment"># 1000000.0</span></span><br></pre></td></tr></table></figure>
<h2 id="21-format-value-format-spec-格式化字符串"><a href="#21-format-value-format-spec-格式化字符串" class="headerlink" title="21. format(value[, format_spec]): 格式化字符串"></a>21. format(value[, format_spec]): 格式化字符串</h2><p>将 <code>value</code> 转换为 <code>format_spec</code> 控制的“格式化”表示;<br><code>format_spec</code> 的解释取决于 <code>value</code> 实参的类型, 但是大多数内置类型使用标准格式化语法: <a href="https://docs.python.org/zh-cn/3/library/string.html#formatspec">格式规格迷你语言</a></p>
<h2 id="22-class-frozenset-iterable-返回一个新的-frozenset-对象"><a href="#22-class-frozenset-iterable-返回一个新的-frozenset-对象" class="headerlink" title="22. class frozenset([iterable]): 返回一个新的 frozenset 对象"></a>22. class frozenset([iterable]): 返回一个新的 frozenset 对象</h2><p>它包含可选参数 <code>iterable</code> 中的元素;<br><code>frozenset</code> 是一个内置的类;<br><a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#types-set">具体文档</a></p>
<h2 id="23-getattr-object-name-default-返回对象命名属性的值"><a href="#23-getattr-object-name-default-返回对象命名属性的值" class="headerlink" title="23. getattr(object, name[, default]): 返回对象命名属性的值"></a>23. getattr(object, name[, default]): 返回对象命名属性的值</h2><p><code>name</code> 必须是字符串; 如果该字符串是对象的属性之一, 则返回该属性的值.<br>例如, <code>getattr(x, &#39;foobar&#39;)</code> 等同于 <code>x.foobar</code><br>如果指定的属性不存在, 且提供了 <code>default</code> 值, 则返回<code>default</code> 值, 否则触发 <code>AttributeError</code>;</p>
<h2 id="24-globals-返回表示当前全局符号表的字典"><a href="#24-globals-返回表示当前全局符号表的字典" class="headerlink" title="24. globals(): 返回表示当前全局符号表的字典"></a>24. globals(): 返回表示当前全局符号表的字典</h2><p>这总是当前模块的字典(在函数或方法中, 不是调用它的模块, 而是定义它的模块)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.name = <span class="string">&quot;zhangsan&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        print(<span class="string">&quot;runing&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">globals</span>())</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    &#123;&#x27;__name__&#x27;: &#x27;__main__&#x27;, &#x27;__doc__&#x27;: None, &#x27;__package__&#x27;: None, &#x27;__loader__&#x27;: &lt;_frozen_importlib_external.SourceFileLoader object at 0x7f9e5edb6fd0&gt;, &#x27;__spec__&#x27;: None, &#x27;__annotations__&#x27;: &#123;&#125;, &#x27;__builtins__&#x27;: &lt;module &#x27;builtins&#x27; (built-in)&gt;, &#x27;__file__&#x27;: &#x27;24_globals.py&#x27;, &#x27;__cached__&#x27;: None, &#x27;Test&#x27;: &lt;class &#x27;__main__.Test&#x27;&gt;&#125;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="25-hasattr-object-name-判断name是object的属性"><a href="#25-hasattr-object-name-判断name是object的属性" class="headerlink" title="25.hasattr(object, name): 判断name是object的属性"></a>25.hasattr(object, name): 判断name是object的属性</h2><p>该实参是一个对象和一个字符串;<br>如果字符串是对象的属性之一的名称, 则返回 True, 否则返回 False; (此功能是通过调用 <code>getattr(object, name)</code> 看是否有 <code>AttributeError</code> 异常来实现的)</p>
<h2 id="26-hash-object-返回该对象的哈希值"><a href="#26-hash-object-返回该对象的哈希值" class="headerlink" title="26.hash(object): 返回该对象的哈希值"></a>26.hash(object): 返回该对象的哈希值</h2><p>返回该对象的哈希值(如果它有的话); 哈希值是整数; 它们在字典查找元素时用来快速比较字典的键; 相同大小的数字变量有相同的哈希值(即使它们类型不同, 如 1 和 1.0)</p>
<blockquote>
<p>注解 如果对象实现了自己的 <code>__hash__()</code> 方法, 请注意, <code>hash()</code> 根据机器的字长来截断返回;</p>
</blockquote>
<h2 id="27-help-object-启动内置的帮助系统-此函数主要在交互式中使用"><a href="#27-help-object-启动内置的帮助系统-此函数主要在交互式中使用" class="headerlink" title="27. help([object]): 启动内置的帮助系统(此函数主要在交互式中使用)"></a>27. help([object]): 启动内置的帮助系统(此函数主要在交互式中使用)</h2><p>如果没有实参, 解释器控制台里会启动交互式帮助系统;<br>如果实参是一个字符串, 则在模块、函数、类、方法、关键字或文档主题中搜索该字符串，并在控制台上打印帮助信息;<br>如果实参是其他任意对象, 则会生成该对象的帮助页;</p>
<h2 id="28-hex-x-将整数十六进制字符串"><a href="#28-hex-x-将整数十六进制字符串" class="headerlink" title="28. hex(x): 将整数十六进制字符串"></a>28. hex(x): 将整数十六进制字符串</h2><p>将整数转换为以“0x”为前缀的小写十六进制字符串;<br>如果 <code>x</code> 不是 Python <code>int</code> 对象, 则必须定义返回整数的 <code>__index__()</code> 方法;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">hex</span>(<span class="number">255</span>)</span><br><span class="line"><span class="string">&#x27;0xff&#x27;</span></span><br><span class="line"><span class="built_in">hex</span>(-<span class="number">42</span>)</span><br><span class="line"><span class="string">&#x27;-0x2a&#x27;</span></span><br></pre></td></tr></table></figure>
<p>如果要将整数转换为大写或小写的十六进制字符串, 并可选择有无“0x”前缀, 则可以使用如下方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;%#x&#x27;</span> % <span class="number">255</span>, <span class="string">&#x27;%x&#x27;</span> % <span class="number">255</span>, <span class="string">&#x27;%X&#x27;</span> % <span class="number">255</span></span><br><span class="line">(<span class="string">&#x27;0xff&#x27;</span>, <span class="string">&#x27;ff&#x27;</span>, <span class="string">&#x27;FF&#x27;</span>)</span><br><span class="line"><span class="built_in">format</span>(<span class="number">255</span>, <span class="string">&#x27;#x&#x27;</span>), <span class="built_in">format</span>(<span class="number">255</span>, <span class="string">&#x27;x&#x27;</span>), <span class="built_in">format</span>(<span class="number">255</span>, <span class="string">&#x27;X&#x27;</span>)</span><br><span class="line">(<span class="string">&#x27;0xff&#x27;</span>, <span class="string">&#x27;ff&#x27;</span>, <span class="string">&#x27;FF&#x27;</span>)</span><br><span class="line">f&#x27;&#123;255:#x&#125;&#x27;, f&#x27;&#123;255:x&#125;&#x27;, f&#x27;&#123;255:X&#125;&#x27;</span><br><span class="line">(<span class="string">&#x27;0xff&#x27;</span>, <span class="string">&#x27;ff&#x27;</span>, <span class="string">&#x27;FF&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="29-id-object-返回对象的“标识值”"><a href="#29-id-object-返回对象的“标识值”" class="headerlink" title="29. id(object):返回对象的“标识值”"></a>29. id(object):返回对象的“标识值”</h2><p>该值是一个整数, 在此对象的生命周期中保证是唯一且恒定的; 两个生命期不重叠的对象可能具有相同的 <code>id()</code> 值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>(<span class="number">123</span>)</span><br><span class="line"><span class="comment"># 4487555232</span></span><br></pre></td></tr></table></figure>
<h2 id="30-input-prompt-写入标准输出"><a href="#30-input-prompt-写入标准输出" class="headerlink" title="30. input([prompt]): 写入标准输出"></a>30. input([prompt]): 写入标准输出</h2><p>如果存在 <code>prompt</code> 实参, 则将其写入标准输出, 末尾不带换行符; 接下来, 该函数从输入中读取一行，将其转换为字符串(除了末尾的换行符)并返回; 当读取到 EOF 时, 则触发 EOFError;</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="built_in">input</span>(<span class="string">&#x27;--&gt; &#x27;</span>)  </span><br><span class="line">--&gt; Monty Python&#x27;s Flying Circus</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s  </span><br><span class="line"><span class="string">&quot;Monty Python&#x27;s Flying Circus&quot;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果加载了<code>readline</code> 模块, <code>input()</code> 将使用它来提供复杂的行编辑和历史记录功能</p>
</blockquote>
<h2 id="31-class-int-返回一个整数对象"><a href="#31-class-int-返回一个整数对象" class="headerlink" title="31. class int: 返回一个整数对象"></a>31. class int: 返回一个整数对象</h2><ul>
<li><code>class int([x])</code></li>
<li><code>class int(x, base=10)</code></li>
</ul>
<p>返回一个基于数字或字符串 x 构造的整数对象, 或者在未给出参数时返回 0;<br>如果 x 定义了 <code>__int__()</code>, <code>int(x)</code> 将返回<code>x.__int__()</code>;<br>如果 x 定义了 <code>__index__()</code>, 它将返回 <code>x.__index__()</code>;<br>如果 x 定义了 <code>__trunc__()</code>, 它将返回 <code>x.__trunc__()</code>;<br>对于浮点数, 它将向零舍入;</p>
<p>如果 x 不是数字, 或者有 <code>base</code> 参数, x 必须是”字符串、bytes、表示进制为 base 的 整数字面值 的 bytearray 实例”;<br>该文字前可以有 + 或 - (中间不能有空格), 前后可以有空格;<br>一个进制为 n 的数字包含 0 到 <code>n-1</code> 的数, 其中 a 到 z(或 A 到 Z )表示 10 到 35;<br>默认的 base 为 10, 允许的进制有 0、2-36; 2、8、16 进制的数字可以在代码中用 0b/0B 、 0o/0O 、 0x/0X 前缀来表示;<br>进制为 0 将安照代码的字面量来精确解释, 最后的结果会是 2、8、10、16 进制中的一个; 所以 int(‘010’, 0) 是非法的，但 int(‘010’) 和 int(‘010’, 8) 是合法的;</p>
]]></content>
      <categories>
        <category>python</category>
        <category>标准库</category>
        <category>内置函数</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
