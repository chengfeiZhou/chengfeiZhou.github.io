<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何在github上搭建一个hexo博客</title>
    <url>/2021/01/01/create-Bolg-site/</url>
    <content><![CDATA[<h1 id="一、为何搭建个人博客"><a href="#一、为何搭建个人博客" class="headerlink" title="一、为何搭建个人博客:"></a>一、为何搭建个人博客:</h1><p>&emsp;&emsp;其实我在CSDN有自己的博客, 随着文章越写越多, 我发现CSDN对分类的数量是有限制的, 后期我想写其他分类的文章的时候, 就不能再创建新的分类了. 也有想过再搞一个微信的公众号, 之前上学那会搞过学院的官方微信公众号, 各种认证和各种敏感词汇搞得很烦, 而且对于一些定制化的接入也比较麻烦. 所以, 想来想去, 还是搞一个内容可以完全由自己掌握的博客. 一来可以当做自己的一个学习笔记, 二来可以分享给需要的朋友, 三来可以作为自己其他服务的入口. 说干就干吧;</p>
<h1 id="二、创建githu仓库"><a href="#二、创建githu仓库" class="headerlink" title="二、创建githu仓库:"></a>二、创建githu仓库:</h1><p>&emsp;&emsp;关于Git仓库有国内的<a href="https://gitee.com/">Gitee</a>和国外的<a href="https://github.com/">Github</a>都可以选择;<br>&emsp;&emsp;默认已经在电脑上安装了<a href="https://git-scm.com/">Git</a>的客户端;</p>
<h2 id="1-创建代码仓库"><a href="#1-创建代码仓库" class="headerlink" title="1. 创建代码仓库:"></a>1. 创建代码仓库:</h2><p><img src="/source/_posts/create-Bolg-site/createRepository.png"></p>
<h1 id="三、Hexo"><a href="#三、Hexo" class="headerlink" title="三、Hexo:"></a>三、Hexo:</h1><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<h1 id="四、编写文章"><a href="#四、编写文章" class="headerlink" title="四、编写文章:"></a>四、编写文章:</h1><h1 id="五、Hexo常用"><a href="#五、Hexo常用" class="headerlink" title="五、Hexo常用:"></a>五、Hexo常用:</h1>]]></content>
      <categories>
        <category>服务器</category>
        <category>Blog</category>
      </categories>
      <tags>
        <tag>服务器</tag>
      </tags>
  </entry>
  <entry>
    <title>python标准库(一)</title>
    <url>/2021/01/04/pythonIndex/</url>
    <content><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述:"></a>一、概述:</h1><p>本项目用来记录学习过程中的代码:<a href="https://github.com/chengfeiZhou/PythonLearn">https://github.com/chengfeiZhou/PythonLearn</a><br>python官方包索引:<a href="https://pypi.org/">https://pypi.org/</a></p>
<h1 id="二、内置函数"><a href="#二、内置函数" class="headerlink" title="二、内置函数:"></a>二、内置函数:</h1><h2 id="1-abs-x"><a href="#1-abs-x" class="headerlink" title="1. abs(x):"></a>1. abs(x):</h2><p>返回一个数的绝对值. 参数可以是整数、浮点数或任何实现了<a href="https://docs.python.org/zh-cn/3/reference/datamodel.html#object.__abs__"><code>__abs__()</code></a>的对象. 如果参数是一个复数, 则返回它的模</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Num</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        self.value = value</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__abs__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;绝对值&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    a = -<span class="number">1</span></span><br><span class="line">    b = <span class="number">3.14</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    d = Num(<span class="number">666</span>)</span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;a&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(a)&#125;</span>&quot;</span>)   <span class="comment"># -1的绝对值是: 1</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;b&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(b)&#125;</span>&quot;</span>)   <span class="comment"># 3.14的绝对值是: 3.14</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;c&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(c)&#125;</span>&quot;</span>)   <span class="comment"># 0的绝对值是: 0</span></span><br><span class="line">    print(<span class="string">f&quot;<span class="subst">&#123;d&#125;</span>的绝对值是: <span class="subst">&#123;<span class="built_in">abs</span>(d)&#125;</span>&quot;</span>)   <span class="comment"># &lt;__main__.Num object at 0x7feaaca58350&gt;的绝对值是: 绝对值</span></span><br></pre></td></tr></table></figure>
<h2 id="2-all-iterable-amp-any-iterable"><a href="#2-all-iterable-amp-any-iterable" class="headerlink" title="2. all(iterable) &amp; any(iterable):"></a>2. all(iterable) &amp; any(iterable):</h2><h3 id="2-1-all-iterable"><a href="#2-1-all-iterable" class="headerlink" title="2.1 all(iterable):"></a>2.1 all(iterable):</h3><p>如果<code>iterable</code>的所有元素均为真值(或可迭代对象为空)则返回<code>True</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">all</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-any-iterable"><a href="#2-2-any-iterable" class="headerlink" title="2.2 any(iterable):"></a>2.2 any(iterable):</h3><p>如果<code>iterable</code>的任一元素为真值则返回<code>True</code>. 如果可迭代对象为空, 返回<code>False</code>.<br>等价于:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">any</span>(<span class="params">iterable</span>):</span></span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> iterable:</span><br><span class="line">        <span class="keyword">if</span> element:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h3 id="2-3-例子"><a href="#2-3-例子" class="headerlink" title="2.3 例子:"></a>2.3 例子:</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">0</span>]</span><br><span class="line">    arr2 = [<span class="string">&quot;&quot;</span>, &#123;&#125;, <span class="number">0</span>]</span><br><span class="line">    print(<span class="string">f&quot;arr1的all: <span class="subst">&#123;<span class="built_in">all</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr2的all: <span class="subst">&#123;<span class="built_in">all</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr2的all: False</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr1)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: True</span></span><br><span class="line">    print(<span class="string">f&quot;arr1的any: <span class="subst">&#123;<span class="built_in">any</span>(arr2)&#125;</span>&quot;</span>)    <span class="comment"># arr1的any: False</span></span><br></pre></td></tr></table></figure>
<h2 id="3-ascii-object"><a href="#3-ascii-object" class="headerlink" title="3. ascii(object)"></a>3. ascii(object)</h2><p>就像函数<code>repr()</code>, 返回一个对象可打印的字符串, 但是<code>repr()</code>返回的字符串中非 ASCII 编码的字符,会使用 <code>\x</code>、<code>\u</code>和<code>\U</code>来转义. 生成的字符串和 Python2 的<code>repr()</code>返回的结果相似.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stu</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这是一个类的repr&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="number">12345567</span>))  <span class="comment">#  12345567</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;hello world!&quot;</span>)) <span class="comment"># &#x27;hello world!&#x27;</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(<span class="string">&quot;你好!&quot;</span>))    <span class="comment"># &#x27;\u4f60\u597d!&#x27;</span></span><br><span class="line"></span><br><span class="line">    s = Stu()</span><br><span class="line">    t = Teacher()</span><br><span class="line">    print(<span class="built_in">ascii</span>(s)) <span class="comment"># \u8fd9\u662f\u4e00\u4e2a\u7c7b\u7684repr</span></span><br><span class="line">    print(<span class="built_in">ascii</span>(t)) <span class="comment"># &lt;__main__.Teacher object at 0x7fd100259350</span></span><br></pre></td></tr></table></figure>
<h2 id="4-bin-x"><a href="#4-bin-x" class="headerlink" title="4. bin(x)"></a>4. bin(x)</h2><p>将一个整数转变为一个前缀为”0b”的二进制字符串. 结果是一个合法的 Python 表达式. 如果 x 不是 Python 的 <code>int</code> 对象，那它需要定义 <code>__index__()</code> 方法返回一个整数. 一些例子:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(3)</span></span><br><span class="line">&#x27;0b11&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; bin(-10)</span></span><br><span class="line">&#x27;-0b1010&#x27;</span><br></pre></td></tr></table></figure>
<p>如果不一定需要前缀“0b”，还可以使用如下的方法。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; format(14, <span class="string">&#x27;#b&#x27;</span>), format(14, <span class="string">&#x27;b&#x27;</span>)</span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f<span class="string">&#x27;&#123;14:#b&#125;&#x27;</span>, f<span class="string">&#x27;&#123;14:b&#125;&#x27;</span></span></span><br><span class="line">(&#x27;0b1110&#x27;, &#x27;1110&#x27;)</span><br></pre></td></tr></table></figure>
<h2 id="5-class-bool-x"><a href="#5-class-bool-x" class="headerlink" title="5. class bool([x]):"></a>5. class bool([x]):</h2><p><code>在 3.7 版更改: x 现在只能作为位置参数</code><br>返回一个布尔, <code>True</code> 或者 <code>False</code>.  x 使用标准的 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#truth">真值测试过程</a> 来转换. 如果 x 是假的或者被省略, 返回 <code>False</code>; 其他情况返回 <code>True</code>. <code>bool</code> 类是 <code>int</code> 的子类(参见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typesnumeric">数字类型 — int, float, complex</a>). 其他类不能继承自它.它只有 <code>False</code> 和 <code>True</code> 两个实例.</p>
<h2 id="6-breakpoint-args-kws"><a href="#6-breakpoint-args-kws" class="headerlink" title="6. breakpoint(*args, **kws):"></a>6. breakpoint(*args, **kws):</h2><p><code>3.7 新版功能</code><br><code>简单可以理解为是一个debug打点函数</code><br>此函数会在调用时将你陷入调试器中. 具体来说, 它调用 <code>sys.breakpointhook()</code>, 直接传递 <code>args</code> 和 <code>kws</code>. 默认情况下, <code>sys.breakpointhook()</code> 调用 <code>pdb.set_trace()</code> 且没有参数. 在这种情况下, 它纯粹是一个便利函数, 因此您不必显式导入 <code>pdb</code> 且键入尽可能少的代码即可进入调试器. 但是, <code>sys.breakpointhook()</code> 可以设置为其他一些函数并被 <code>breakpoint()</code> 自动调用, 以允许进入你想用的调试器.<code>引发一个 审计事件</code>builtins.breakpoint<code>并附带参数</code>breakpointhook`.<br><a href="https://www.jianshu.com/p/5d3c52c5c2a2">详细参看</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    str1 = <span class="string">&quot;hello world! d你好, 世界!&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> str1:</span><br><span class="line">        print(i)</span><br><span class="line">        <span class="built_in">breakpoint</span>()</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<p><img src="/images/pythonIndex/06_breakpoint.png"><br>Tips:</p>
<ul>
<li>命令 <code>p</code> 用于查看表达式的值; </li>
<li>命令 <code>c</code> 用于退出调试器, 并继续执行程序;</li>
</ul>
<h2 id="7-class-bytearray-amp-class-bytes"><a href="#7-class-bytearray-amp-class-bytes" class="headerlink" title="7. class bytearray() &amp; class bytes():"></a>7. class bytearray() &amp; class bytes():</h2><h3 id="7-1-class-bytearray-source-encoding-errors"><a href="#7-1-class-bytearray-source-encoding-errors" class="headerlink" title="7.1 class bytearray([source[, encoding[, errors]]]):"></a>7.1 class bytearray([source[, encoding[, errors]]]):</h3><p>返回一个新的 bytes 数组. bytearray 类是一个可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. 它有<code>可变序列类型</code>大部分常见的方法；同时有 <code>bytes</code> 类型的大部分方法。<br>可选形参 source 可以用不同的方式来初始化数组：</p>
<ul>
<li>如果是一个<code>string</code>,您必须提供<code>encoding</code>参数(errors 参数仍是可选的); <code>bytearray()</code>会使用 <code>str.encode()</code>方法来将 string 转变成 bytes;</li>
<li>如果是一个<code>integer</code>, 会初始化大小为该数字的数组, 并使用 null 字节填充.</li>
<li>如果是一个遵循 <code>缓冲区接口</code> 的对象, 该对象的只读缓冲区将被用来初始化字节数组;</li>
<li>如果是一个 <code>iterable</code> 可迭代对象, 它的元素的范围必须是 <code>0 &lt;= x &lt; 256</code> 的整数, 它会被用作数组的初始内容;</li>
<li>如果没有实参, 则创建大小为 <code>0</code>的数组;<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    strB = <span class="built_in">bytearray</span>(<span class="string">&quot;hello world&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    intB = <span class="built_in">bytearray</span>(<span class="number">4</span>)</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">128</span>])</span><br><span class="line">    iterB = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    print(strB)</span><br><span class="line">    print(intB)</span><br><span class="line">    print(iterB)</span><br><span class="line">    print(iterB)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./7_1_bytearray.py&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        bufferB = <span class="built_in">bytearray</span>(f.read(), encoding=<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        print(bufferB)</span><br></pre></td></tr></table></figure>
<img src="/images/pythonIndex/7_1_butearray.png"></li>
</ul>
<h3 id="7-2-class-bytes-source-encoding-errors"><a href="#7-2-class-bytes-source-encoding-errors" class="headerlink" title="7.2 class bytes([source[, encoding[, errors]]])"></a>7.2 class bytes([source[, encoding[, errors]]])</h3><p>返回一个新的<code>bytes</code>对象, 是一个不可变序列, 包含范围为 <code>0 &lt;= x &lt; 256</code> 的整数. <code>bytes</code> 是 <code>bytearray</code> 的不可变版本 - 它有其中不改变序列的方法和相同的索引、切片操作;<br>因此，构造函数的实参和 <code>bytearray()</code> 相同;<br>字节对象还可以用字面值创建;</p>
<h3 id="7-3-补充"><a href="#7-3-补充" class="headerlink" title="7.3 补充:"></a>7.3 补充:</h3><p>另见 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#binaryseq">二进制序列类型 — bytes, bytearray, memoryview</a>, <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#typebytes">bytes 对象</a> 和 <a href="https://docs.python.org/zh-cn/3/library/stdtypes.html#bytes-methods">bytes 和 bytearray 操作</a>;</p>
]]></content>
      <categories>
        <category>python</category>
        <category>标准库</category>
        <category>内置函数</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/12/29/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
